// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: trade/trade.proto

package trade

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Share struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoolAddress    string `protobuf:"bytes,1,opt,name=pool_address,json=poolAddress,proto3" json:"pool_address,omitempty"`
	AccountAddress string `protobuf:"bytes,2,opt,name=account_address,json=accountAddress,proto3" json:"account_address,omitempty"`
	Amount         uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Ledger         uint32 `protobuf:"varint,4,opt,name=ledger,proto3" json:"ledger,omitempty"`
	TxHash         string `protobuf:"bytes,5,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	TxTime         string `protobuf:"bytes,6,opt,name=tx_time,json=txTime,proto3" json:"tx_time,omitempty"`
}

func (x *Share) Reset() {
	*x = Share{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_trade_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Share) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Share) ProtoMessage() {}

func (x *Share) ProtoReflect() protoreflect.Message {
	mi := &file_trade_trade_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Share.ProtoReflect.Descriptor instead.
func (*Share) Descriptor() ([]byte, []int) {
	return file_trade_trade_proto_rawDescGZIP(), []int{0}
}

func (x *Share) GetPoolAddress() string {
	if x != nil {
		return x.PoolAddress
	}
	return ""
}

func (x *Share) GetAccountAddress() string {
	if x != nil {
		return x.AccountAddress
	}
	return ""
}

func (x *Share) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Share) GetLedger() uint32 {
	if x != nil {
		return x.Ledger
	}
	return 0
}

func (x *Share) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *Share) GetTxTime() string {
	if x != nil {
		return x.TxTime
	}
	return ""
}

type Stake struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoolAddress    string `protobuf:"bytes,1,opt,name=pool_address,json=poolAddress,proto3" json:"pool_address,omitempty"`
	AccountAddress string `protobuf:"bytes,2,opt,name=account_address,json=accountAddress,proto3" json:"account_address,omitempty"`
	Amount         uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Ledger         uint32 `protobuf:"varint,4,opt,name=ledger,proto3" json:"ledger,omitempty"`
	TxHash         string `protobuf:"bytes,5,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	TxTime         string `protobuf:"bytes,6,opt,name=tx_time,json=txTime,proto3" json:"tx_time,omitempty"`
}

func (x *Stake) Reset() {
	*x = Stake{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_trade_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stake) ProtoMessage() {}

func (x *Stake) ProtoReflect() protoreflect.Message {
	mi := &file_trade_trade_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stake.ProtoReflect.Descriptor instead.
func (*Stake) Descriptor() ([]byte, []int) {
	return file_trade_trade_proto_rawDescGZIP(), []int{1}
}

func (x *Stake) GetPoolAddress() string {
	if x != nil {
		return x.PoolAddress
	}
	return ""
}

func (x *Stake) GetAccountAddress() string {
	if x != nil {
		return x.AccountAddress
	}
	return ""
}

func (x *Stake) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Stake) GetLedger() uint32 {
	if x != nil {
		return x.Ledger
	}
	return 0
}

func (x *Stake) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *Stake) GetTxTime() string {
	if x != nil {
		return x.TxTime
	}
	return ""
}

type Pool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoolAddress string `protobuf:"bytes,1,opt,name=pool_address,json=poolAddress,proto3" json:"pool_address,omitempty"`
	ReserveA    uint64 `protobuf:"varint,2,opt,name=reserve_a,json=reserveA,proto3" json:"reserve_a,omitempty"`
	ReserveB    uint64 `protobuf:"varint,3,opt,name=reserve_b,json=reserveB,proto3" json:"reserve_b,omitempty"`
	Share       uint64 `protobuf:"varint,4,opt,name=share,proto3" json:"share,omitempty"`
	Ledger      uint32 `protobuf:"varint,5,opt,name=ledger,proto3" json:"ledger,omitempty"`
	TxHash      string `protobuf:"bytes,6,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	TxTime      string `protobuf:"bytes,7,opt,name=tx_time,json=txTime,proto3" json:"tx_time,omitempty"`
}

func (x *Pool) Reset() {
	*x = Pool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_trade_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pool) ProtoMessage() {}

func (x *Pool) ProtoReflect() protoreflect.Message {
	mi := &file_trade_trade_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pool.ProtoReflect.Descriptor instead.
func (*Pool) Descriptor() ([]byte, []int) {
	return file_trade_trade_proto_rawDescGZIP(), []int{2}
}

func (x *Pool) GetPoolAddress() string {
	if x != nil {
		return x.PoolAddress
	}
	return ""
}

func (x *Pool) GetReserveA() uint64 {
	if x != nil {
		return x.ReserveA
	}
	return 0
}

func (x *Pool) GetReserveB() uint64 {
	if x != nil {
		return x.ReserveB
	}
	return 0
}

func (x *Pool) GetShare() uint64 {
	if x != nil {
		return x.Share
	}
	return 0
}

func (x *Pool) GetLedger() uint32 {
	if x != nil {
		return x.Ledger
	}
	return 0
}

func (x *Pool) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *Pool) GetTxTime() string {
	if x != nil {
		return x.TxTime
	}
	return ""
}

type Trade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeId        uint32  `protobuf:"varint,1,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`
	TickerId       string  `protobuf:"bytes,2,opt,name=ticker_id,json=tickerId,proto3" json:"ticker_id,omitempty"`
	BaseVolume     uint64  `protobuf:"varint,3,opt,name=base_volume,json=baseVolume,proto3" json:"base_volume,omitempty"`
	TargetVolume   uint64  `protobuf:"varint,4,opt,name=target_volume,json=targetVolume,proto3" json:"target_volume,omitempty"`
	TradeTimestamp uint64  `protobuf:"varint,5,opt,name=trade_timestamp,json=tradeTimestamp,proto3" json:"trade_timestamp,omitempty"`
	TradeType      string  `protobuf:"bytes,6,opt,name=trade_type,json=tradeType,proto3" json:"trade_type,omitempty"`
	TxHash         string  `protobuf:"bytes,7,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	Maker          string  `protobuf:"bytes,8,opt,name=maker,proto3" json:"maker,omitempty"`
	Price          float64 `protobuf:"fixed64,9,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *Trade) Reset() {
	*x = Trade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_trade_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trade) ProtoMessage() {}

func (x *Trade) ProtoReflect() protoreflect.Message {
	mi := &file_trade_trade_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trade.ProtoReflect.Descriptor instead.
func (*Trade) Descriptor() ([]byte, []int) {
	return file_trade_trade_proto_rawDescGZIP(), []int{3}
}

func (x *Trade) GetTradeId() uint32 {
	if x != nil {
		return x.TradeId
	}
	return 0
}

func (x *Trade) GetTickerId() string {
	if x != nil {
		return x.TickerId
	}
	return ""
}

func (x *Trade) GetBaseVolume() uint64 {
	if x != nil {
		return x.BaseVolume
	}
	return 0
}

func (x *Trade) GetTargetVolume() uint64 {
	if x != nil {
		return x.TargetVolume
	}
	return 0
}

func (x *Trade) GetTradeTimestamp() uint64 {
	if x != nil {
		return x.TradeTimestamp
	}
	return 0
}

func (x *Trade) GetTradeType() string {
	if x != nil {
		return x.TradeType
	}
	return ""
}

func (x *Trade) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *Trade) GetMaker() string {
	if x != nil {
		return x.Maker
	}
	return ""
}

func (x *Trade) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

type TradeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeId        uint32  `protobuf:"varint,1,opt,name=trade_id,proto3" json:"trade_id,omitempty"`
	Price          float64 `protobuf:"fixed64,2,opt,name=price,proto3" json:"price,omitempty"`
	BaseVolume     float64 `protobuf:"fixed64,3,opt,name=base_volume,proto3" json:"base_volume,omitempty"`
	TargetVolume   float64 `protobuf:"fixed64,4,opt,name=target_volume,proto3" json:"target_volume,omitempty"`
	TradeTimestamp uint64  `protobuf:"varint,5,opt,name=trade_timestamp,proto3" json:"trade_timestamp,omitempty"`
	Type           string  `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	TickerId       string  `protobuf:"bytes,7,opt,name=ticker_id,proto3" json:"ticker_id,omitempty"`
}

func (x *TradeInfo) Reset() {
	*x = TradeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_trade_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeInfo) ProtoMessage() {}

func (x *TradeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_trade_trade_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeInfo.ProtoReflect.Descriptor instead.
func (*TradeInfo) Descriptor() ([]byte, []int) {
	return file_trade_trade_proto_rawDescGZIP(), []int{4}
}

func (x *TradeInfo) GetTradeId() uint32 {
	if x != nil {
		return x.TradeId
	}
	return 0
}

func (x *TradeInfo) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *TradeInfo) GetBaseVolume() float64 {
	if x != nil {
		return x.BaseVolume
	}
	return 0
}

func (x *TradeInfo) GetTargetVolume() float64 {
	if x != nil {
		return x.TargetVolume
	}
	return 0
}

func (x *TradeInfo) GetTradeTimestamp() uint64 {
	if x != nil {
		return x.TradeTimestamp
	}
	return 0
}

func (x *TradeInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TradeInfo) GetTickerId() string {
	if x != nil {
		return x.TickerId
	}
	return ""
}

type Week struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year uint32 `protobuf:"varint,1,opt,name=year,proto3" json:"year,omitempty"`
	Week uint32 `protobuf:"varint,2,opt,name=week,proto3" json:"week,omitempty"`
}

func (x *Week) Reset() {
	*x = Week{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_trade_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Week) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Week) ProtoMessage() {}

func (x *Week) ProtoReflect() protoreflect.Message {
	mi := &file_trade_trade_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Week.ProtoReflect.Descriptor instead.
func (*Week) Descriptor() ([]byte, []int) {
	return file_trade_trade_proto_rawDescGZIP(), []int{5}
}

func (x *Week) GetYear() uint32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *Week) GetWeek() uint32 {
	if x != nil {
		return x.Week
	}
	return 0
}

type TradeVolumeByWeek struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Week         *Week  `protobuf:"bytes,1,opt,name=week,proto3" json:"week,omitempty"`
	TokenAVolume uint64 `protobuf:"varint,2,opt,name=token_a_volume,json=tokenAVolume,proto3" json:"token_a_volume,omitempty"`
	TokenBVolume uint64 `protobuf:"varint,3,opt,name=token_b_volume,json=tokenBVolume,proto3" json:"token_b_volume,omitempty"`
}

func (x *TradeVolumeByWeek) Reset() {
	*x = TradeVolumeByWeek{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_trade_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeVolumeByWeek) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeVolumeByWeek) ProtoMessage() {}

func (x *TradeVolumeByWeek) ProtoReflect() protoreflect.Message {
	mi := &file_trade_trade_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeVolumeByWeek.ProtoReflect.Descriptor instead.
func (*TradeVolumeByWeek) Descriptor() ([]byte, []int) {
	return file_trade_trade_proto_rawDescGZIP(), []int{6}
}

func (x *TradeVolumeByWeek) GetWeek() *Week {
	if x != nil {
		return x.Week
	}
	return nil
}

func (x *TradeVolumeByWeek) GetTokenAVolume() uint64 {
	if x != nil {
		return x.TokenAVolume
	}
	return 0
}

func (x *TradeVolumeByWeek) GetTokenBVolume() uint64 {
	if x != nil {
		return x.TokenBVolume
	}
	return 0
}

type Month struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year  uint32 `protobuf:"varint,1,opt,name=year,proto3" json:"year,omitempty"`
	Month uint32 `protobuf:"varint,2,opt,name=month,proto3" json:"month,omitempty"`
}

func (x *Month) Reset() {
	*x = Month{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_trade_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Month) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Month) ProtoMessage() {}

func (x *Month) ProtoReflect() protoreflect.Message {
	mi := &file_trade_trade_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Month.ProtoReflect.Descriptor instead.
func (*Month) Descriptor() ([]byte, []int) {
	return file_trade_trade_proto_rawDescGZIP(), []int{7}
}

func (x *Month) GetYear() uint32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *Month) GetMonth() uint32 {
	if x != nil {
		return x.Month
	}
	return 0
}

type TradeVolumeByMonth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Month        *Month `protobuf:"bytes,1,opt,name=month,proto3" json:"month,omitempty"`
	TokenAVolume uint64 `protobuf:"varint,2,opt,name=token_a_volume,json=tokenAVolume,proto3" json:"token_a_volume,omitempty"`
	TokenBVolume uint64 `protobuf:"varint,3,opt,name=token_b_volume,json=tokenBVolume,proto3" json:"token_b_volume,omitempty"`
}

func (x *TradeVolumeByMonth) Reset() {
	*x = TradeVolumeByMonth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_trade_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeVolumeByMonth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeVolumeByMonth) ProtoMessage() {}

func (x *TradeVolumeByMonth) ProtoReflect() protoreflect.Message {
	mi := &file_trade_trade_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeVolumeByMonth.ProtoReflect.Descriptor instead.
func (*TradeVolumeByMonth) Descriptor() ([]byte, []int) {
	return file_trade_trade_proto_rawDescGZIP(), []int{8}
}

func (x *TradeVolumeByMonth) GetMonth() *Month {
	if x != nil {
		return x.Month
	}
	return nil
}

func (x *TradeVolumeByMonth) GetTokenAVolume() uint64 {
	if x != nil {
		return x.TokenAVolume
	}
	return 0
}

func (x *TradeVolumeByMonth) GetTokenBVolume() uint64 {
	if x != nil {
		return x.TokenBVolume
	}
	return 0
}

type Date struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Day   uint32 `protobuf:"varint,1,opt,name=day,proto3" json:"day,omitempty"`
	Month uint32 `protobuf:"varint,2,opt,name=month,proto3" json:"month,omitempty"`
	Year  uint32 `protobuf:"varint,3,opt,name=year,proto3" json:"year,omitempty"`
}

func (x *Date) Reset() {
	*x = Date{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_trade_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Date) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Date) ProtoMessage() {}

func (x *Date) ProtoReflect() protoreflect.Message {
	mi := &file_trade_trade_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Date.ProtoReflect.Descriptor instead.
func (*Date) Descriptor() ([]byte, []int) {
	return file_trade_trade_proto_rawDescGZIP(), []int{9}
}

func (x *Date) GetDay() uint32 {
	if x != nil {
		return x.Day
	}
	return 0
}

func (x *Date) GetMonth() uint32 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *Date) GetYear() uint32 {
	if x != nil {
		return x.Year
	}
	return 0
}

type TradeVolumeByDate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date         *Date  `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	TokenAVolume uint64 `protobuf:"varint,2,opt,name=token_a_volume,json=tokenAVolume,proto3" json:"token_a_volume,omitempty"`
	TokenBVolume uint64 `protobuf:"varint,3,opt,name=token_b_volume,json=tokenBVolume,proto3" json:"token_b_volume,omitempty"`
}

func (x *TradeVolumeByDate) Reset() {
	*x = TradeVolumeByDate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_trade_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeVolumeByDate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeVolumeByDate) ProtoMessage() {}

func (x *TradeVolumeByDate) ProtoReflect() protoreflect.Message {
	mi := &file_trade_trade_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeVolumeByDate.ProtoReflect.Descriptor instead.
func (*TradeVolumeByDate) Descriptor() ([]byte, []int) {
	return file_trade_trade_proto_rawDescGZIP(), []int{10}
}

func (x *TradeVolumeByDate) GetDate() *Date {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *TradeVolumeByDate) GetTokenAVolume() uint64 {
	if x != nil {
		return x.TokenAVolume
	}
	return 0
}

func (x *TradeVolumeByDate) GetTokenBVolume() uint64 {
	if x != nil {
		return x.TokenBVolume
	}
	return 0
}

type TimeHour struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hour uint32 `protobuf:"varint,1,opt,name=hour,proto3" json:"hour,omitempty"`
	Date *Date  `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *TimeHour) Reset() {
	*x = TimeHour{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_trade_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeHour) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeHour) ProtoMessage() {}

func (x *TimeHour) ProtoReflect() protoreflect.Message {
	mi := &file_trade_trade_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeHour.ProtoReflect.Descriptor instead.
func (*TimeHour) Descriptor() ([]byte, []int) {
	return file_trade_trade_proto_rawDescGZIP(), []int{11}
}

func (x *TimeHour) GetHour() uint32 {
	if x != nil {
		return x.Hour
	}
	return 0
}

func (x *TimeHour) GetDate() *Date {
	if x != nil {
		return x.Date
	}
	return nil
}

type TradeVolumeByHour struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time         *TimeHour `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	TokenAVolume uint64    `protobuf:"varint,2,opt,name=token_a_volume,json=tokenAVolume,proto3" json:"token_a_volume,omitempty"`
	TokenBVolume uint64    `protobuf:"varint,3,opt,name=token_b_volume,json=tokenBVolume,proto3" json:"token_b_volume,omitempty"`
}

func (x *TradeVolumeByHour) Reset() {
	*x = TradeVolumeByHour{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_trade_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeVolumeByHour) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeVolumeByHour) ProtoMessage() {}

func (x *TradeVolumeByHour) ProtoReflect() protoreflect.Message {
	mi := &file_trade_trade_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeVolumeByHour.ProtoReflect.Descriptor instead.
func (*TradeVolumeByHour) Descriptor() ([]byte, []int) {
	return file_trade_trade_proto_rawDescGZIP(), []int{12}
}

func (x *TradeVolumeByHour) GetTime() *TimeHour {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *TradeVolumeByHour) GetTokenAVolume() uint64 {
	if x != nil {
		return x.TokenAVolume
	}
	return 0
}

func (x *TradeVolumeByHour) GetTokenBVolume() uint64 {
	if x != nil {
		return x.TokenBVolume
	}
	return 0
}

type PriceGraph struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeStamp uint64  `protobuf:"varint,1,opt,name=time_stamp,json=timeStamp,proto3" json:"time_stamp,omitempty"`
	Price     float64 `protobuf:"fixed64,2,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *PriceGraph) Reset() {
	*x = PriceGraph{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_trade_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceGraph) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceGraph) ProtoMessage() {}

func (x *PriceGraph) ProtoReflect() protoreflect.Message {
	mi := &file_trade_trade_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceGraph.ProtoReflect.Descriptor instead.
func (*PriceGraph) Descriptor() ([]byte, []int) {
	return file_trade_trade_proto_rawDescGZIP(), []int{13}
}

func (x *PriceGraph) GetTimeStamp() uint64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

func (x *PriceGraph) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

var File_trade_trade_proto protoreflect.FileDescriptor

var file_trade_trade_proto_rawDesc = []byte{
	0x0a, 0x11, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x05, 0x74, 0x72, 0x61, 0x64, 0x65, 0x22, 0xb5, 0x01, 0x0a, 0x05, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6f, 0x6f, 0x6c,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0xb5, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x6f, 0x6f, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x27, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xc3, 0x01, 0x0a, 0x04, 0x50,
	0x6f, 0x6f, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6f, 0x6f, 0x6c, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x5f, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x41, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x62,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x42,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x73, 0x68, 0x61, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x92, 0x02, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x6b,
	0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0xe1, 0x01, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x2e, 0x0a, 0x04, 0x57, 0x65, 0x65,
	0x6b, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x77, 0x65, 0x65, 0x6b, 0x22, 0x80, 0x01, 0x0a, 0x11, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x42, 0x79, 0x57, 0x65, 0x65, 0x6b, 0x12,
	0x1f, 0x0a, 0x04, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x57, 0x65, 0x65, 0x6b, 0x52, 0x04, 0x77, 0x65, 0x65, 0x6b,
	0x12, 0x24, 0x0a, 0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x5f, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x62, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x31, 0x0a, 0x05,
	0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x22,
	0x84, 0x01, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x64, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x42,
	0x79, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x4d, 0x6f,
	0x6e, 0x74, 0x68, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x12, 0x24, 0x0a, 0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x62, 0x5f, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x42, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x64, 0x61, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x22, 0x80, 0x01, 0x0a, 0x11, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x42, 0x79, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x1f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x5f, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x41, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x5f, 0x62, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x3f, 0x0a,
	0x08, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x75,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x12, 0x1f, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0x84,
	0x01, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x64, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x42, 0x79,
	0x48, 0x6f, 0x75, 0x72, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x48,
	0x6f, 0x75, 0x72, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x61, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12,
	0x24, 0x0a, 0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x62, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x41, 0x0a, 0x0a, 0x50, 0x72, 0x69, 0x63, 0x65, 0x47, 0x72,
	0x61, 0x70, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x77, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x2e,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x42, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x64, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x6f, 0x2f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x2d,
	0x61, 0x70, 0x69, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x74, 0x72, 0x61, 0x64, 0x65, 0xa2,
	0x02, 0x03, 0x54, 0x58, 0x58, 0xaa, 0x02, 0x05, 0x54, 0x72, 0x61, 0x64, 0x65, 0xca, 0x02, 0x05,
	0x54, 0x72, 0x61, 0x64, 0x65, 0xe2, 0x02, 0x11, 0x54, 0x72, 0x61, 0x64, 0x65, 0x5c, 0x47, 0x50,
	0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x05, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_trade_trade_proto_rawDescOnce sync.Once
	file_trade_trade_proto_rawDescData = file_trade_trade_proto_rawDesc
)

func file_trade_trade_proto_rawDescGZIP() []byte {
	file_trade_trade_proto_rawDescOnce.Do(func() {
		file_trade_trade_proto_rawDescData = protoimpl.X.CompressGZIP(file_trade_trade_proto_rawDescData)
	})
	return file_trade_trade_proto_rawDescData
}

var file_trade_trade_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_trade_trade_proto_goTypes = []any{
	(*Share)(nil),              // 0: trade.Share
	(*Stake)(nil),              // 1: trade.Stake
	(*Pool)(nil),               // 2: trade.Pool
	(*Trade)(nil),              // 3: trade.Trade
	(*TradeInfo)(nil),          // 4: trade.TradeInfo
	(*Week)(nil),               // 5: trade.Week
	(*TradeVolumeByWeek)(nil),  // 6: trade.TradeVolumeByWeek
	(*Month)(nil),              // 7: trade.Month
	(*TradeVolumeByMonth)(nil), // 8: trade.TradeVolumeByMonth
	(*Date)(nil),               // 9: trade.Date
	(*TradeVolumeByDate)(nil),  // 10: trade.TradeVolumeByDate
	(*TimeHour)(nil),           // 11: trade.TimeHour
	(*TradeVolumeByHour)(nil),  // 12: trade.TradeVolumeByHour
	(*PriceGraph)(nil),         // 13: trade.PriceGraph
}
var file_trade_trade_proto_depIdxs = []int32{
	5,  // 0: trade.TradeVolumeByWeek.week:type_name -> trade.Week
	7,  // 1: trade.TradeVolumeByMonth.month:type_name -> trade.Month
	9,  // 2: trade.TradeVolumeByDate.date:type_name -> trade.Date
	9,  // 3: trade.TimeHour.date:type_name -> trade.Date
	11, // 4: trade.TradeVolumeByHour.time:type_name -> trade.TimeHour
	5,  // [5:5] is the sub-list for method output_type
	5,  // [5:5] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_trade_trade_proto_init() }
func file_trade_trade_proto_init() {
	if File_trade_trade_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_trade_trade_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Share); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_trade_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Stake); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_trade_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*Pool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_trade_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*Trade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_trade_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*TradeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_trade_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*Week); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_trade_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*TradeVolumeByWeek); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_trade_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*Month); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_trade_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*TradeVolumeByMonth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_trade_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*Date); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_trade_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*TradeVolumeByDate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_trade_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*TimeHour); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_trade_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*TradeVolumeByHour); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_trade_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*PriceGraph); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_trade_trade_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_trade_trade_proto_goTypes,
		DependencyIndexes: file_trade_trade_proto_depIdxs,
		MessageInfos:      file_trade_trade_proto_msgTypes,
	}.Build()
	File_trade_trade_proto = out.File
	file_trade_trade_proto_rawDesc = nil
	file_trade_trade_proto_goTypes = nil
	file_trade_trade_proto_depIdxs = nil
}
