// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: trade/trade.proto

package trade

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Trade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeId        string `protobuf:"bytes,1,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`
	Price          string `protobuf:"bytes,2,opt,name=price,proto3" json:"price,omitempty"`
	BaseVolume     uint64 `protobuf:"varint,3,opt,name=base_volume,json=baseVolume,proto3" json:"base_volume,omitempty"`
	TargetVolume   uint64 `protobuf:"varint,4,opt,name=target_volume,json=targetVolume,proto3" json:"target_volume,omitempty"`
	TradeTimestamp uint64 `protobuf:"varint,5,opt,name=trade_timestamp,json=tradeTimestamp,proto3" json:"trade_timestamp,omitempty"`
	TradeType      string `protobuf:"bytes,6,opt,name=trade_type,json=tradeType,proto3" json:"trade_type,omitempty"`
}

func (x *Trade) Reset() {
	*x = Trade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_trade_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trade) ProtoMessage() {}

func (x *Trade) ProtoReflect() protoreflect.Message {
	mi := &file_trade_trade_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trade.ProtoReflect.Descriptor instead.
func (*Trade) Descriptor() ([]byte, []int) {
	return file_trade_trade_proto_rawDescGZIP(), []int{0}
}

func (x *Trade) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *Trade) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *Trade) GetBaseVolume() uint64 {
	if x != nil {
		return x.BaseVolume
	}
	return 0
}

func (x *Trade) GetTargetVolume() uint64 {
	if x != nil {
		return x.TargetVolume
	}
	return 0
}

func (x *Trade) GetTradeTimestamp() uint64 {
	if x != nil {
		return x.TradeTimestamp
	}
	return 0
}

func (x *Trade) GetTradeType() string {
	if x != nil {
		return x.TradeType
	}
	return ""
}

type TradeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeId        string `protobuf:"bytes,1,opt,name=trade_id,proto3" json:"trade_id,omitempty"`
	Price          string `protobuf:"bytes,2,opt,name=price,proto3" json:"price,omitempty"`
	BaseVolume     string `protobuf:"bytes,3,opt,name=base_volume,proto3" json:"base_volume,omitempty"`
	TargetVolume   string `protobuf:"bytes,4,opt,name=target_volume,proto3" json:"target_volume,omitempty"`
	TradeTimestamp uint64 `protobuf:"varint,5,opt,name=trade_timestamp,proto3" json:"trade_timestamp,omitempty"`
	Type           string `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *TradeInfo) Reset() {
	*x = TradeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_trade_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeInfo) ProtoMessage() {}

func (x *TradeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_trade_trade_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeInfo.ProtoReflect.Descriptor instead.
func (*TradeInfo) Descriptor() ([]byte, []int) {
	return file_trade_trade_proto_rawDescGZIP(), []int{1}
}

func (x *TradeInfo) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *TradeInfo) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *TradeInfo) GetBaseVolume() string {
	if x != nil {
		return x.BaseVolume
	}
	return ""
}

func (x *TradeInfo) GetTargetVolume() string {
	if x != nil {
		return x.TargetVolume
	}
	return ""
}

func (x *TradeInfo) GetTradeTimestamp() uint64 {
	if x != nil {
		return x.TradeTimestamp
	}
	return 0
}

func (x *TradeInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type TradesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TickerId  string `protobuf:"bytes,1,opt,name=ticker_id,json=tickerId,proto3" json:"ticker_id,omitempty"`
	Type      string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Limit     uint32 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	StartTime uint64 `protobuf:"varint,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   uint64 `protobuf:"varint,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *TradesRequest) Reset() {
	*x = TradesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_trade_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradesRequest) ProtoMessage() {}

func (x *TradesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trade_trade_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradesRequest.ProtoReflect.Descriptor instead.
func (*TradesRequest) Descriptor() ([]byte, []int) {
	return file_trade_trade_proto_rawDescGZIP(), []int{2}
}

func (x *TradesRequest) GetTickerId() string {
	if x != nil {
		return x.TickerId
	}
	return ""
}

func (x *TradesRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TradesRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *TradesRequest) GetStartTime() uint64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *TradesRequest) GetEndTime() uint64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type TradesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Trades []*TradeInfo `protobuf:"bytes,1,rep,name=trades,proto3" json:"trades,omitempty"`
}

func (x *TradesResponse) Reset() {
	*x = TradesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_trade_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradesResponse) ProtoMessage() {}

func (x *TradesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trade_trade_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradesResponse.ProtoReflect.Descriptor instead.
func (*TradesResponse) Descriptor() ([]byte, []int) {
	return file_trade_trade_proto_rawDescGZIP(), []int{3}
}

func (x *TradesResponse) GetTrades() []*TradeInfo {
	if x != nil {
		return x.Trades
	}
	return nil
}

var File_trade_trade_proto protoreflect.FileDescriptor

var file_trade_trade_proto_rawDesc = []byte{
	0x0a, 0x11, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x05, 0x74, 0x72, 0x61, 0x64, 0x65, 0x22, 0xc6, 0x01, 0x0a, 0x05, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x62, 0x61, 0x73, 0x65,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x22, 0xc3, 0x01, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x0d, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x3a, 0x0a, 0x0e,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28,
	0x0a, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x42, 0x77, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x2e,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x42, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x64, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x6f, 0x2f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x2d,
	0x61, 0x70, 0x69, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x74, 0x72, 0x61, 0x64, 0x65, 0xa2,
	0x02, 0x03, 0x54, 0x58, 0x58, 0xaa, 0x02, 0x05, 0x54, 0x72, 0x61, 0x64, 0x65, 0xca, 0x02, 0x05,
	0x54, 0x72, 0x61, 0x64, 0x65, 0xe2, 0x02, 0x11, 0x54, 0x72, 0x61, 0x64, 0x65, 0x5c, 0x47, 0x50,
	0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x05, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_trade_trade_proto_rawDescOnce sync.Once
	file_trade_trade_proto_rawDescData = file_trade_trade_proto_rawDesc
)

func file_trade_trade_proto_rawDescGZIP() []byte {
	file_trade_trade_proto_rawDescOnce.Do(func() {
		file_trade_trade_proto_rawDescData = protoimpl.X.CompressGZIP(file_trade_trade_proto_rawDescData)
	})
	return file_trade_trade_proto_rawDescData
}

var file_trade_trade_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_trade_trade_proto_goTypes = []any{
	(*Trade)(nil),          // 0: trade.Trade
	(*TradeInfo)(nil),      // 1: trade.TradeInfo
	(*TradesRequest)(nil),  // 2: trade.TradesRequest
	(*TradesResponse)(nil), // 3: trade.TradesResponse
}
var file_trade_trade_proto_depIdxs = []int32{
	1, // 0: trade.TradesResponse.trades:type_name -> trade.TradeInfo
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_trade_trade_proto_init() }
func file_trade_trade_proto_init() {
	if File_trade_trade_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_trade_trade_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Trade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_trade_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*TradeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_trade_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*TradesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_trade_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*TradesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_trade_trade_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_trade_trade_proto_goTypes,
		DependencyIndexes: file_trade_trade_proto_depIdxs,
		MessageInfos:      file_trade_trade_proto_msgTypes,
	}.Build()
	File_trade_trade_proto = out.File
	file_trade_trade_proto_rawDesc = nil
	file_trade_trade_proto_goTypes = nil
	file_trade_trade_proto_depIdxs = nil
}
