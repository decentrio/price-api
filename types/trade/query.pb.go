// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: trade/query.proto

package trade

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TradesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TickerId  string `protobuf:"bytes,1,opt,name=ticker_id,json=tickerId,proto3" json:"ticker_id,omitempty"`
	Type      string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Limit     uint32 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	StartTime uint64 `protobuf:"varint,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   uint64 `protobuf:"varint,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *TradesRequest) Reset() {
	*x = TradesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_query_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradesRequest) ProtoMessage() {}

func (x *TradesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trade_query_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradesRequest.ProtoReflect.Descriptor instead.
func (*TradesRequest) Descriptor() ([]byte, []int) {
	return file_trade_query_proto_rawDescGZIP(), []int{0}
}

func (x *TradesRequest) GetTickerId() string {
	if x != nil {
		return x.TickerId
	}
	return ""
}

func (x *TradesRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TradesRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *TradesRequest) GetStartTime() uint64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *TradesRequest) GetEndTime() uint64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type TradesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Trades []*TradeInfo `protobuf:"bytes,1,rep,name=trades,proto3" json:"trades,omitempty"`
}

func (x *TradesResponse) Reset() {
	*x = TradesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_query_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradesResponse) ProtoMessage() {}

func (x *TradesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trade_query_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradesResponse.ProtoReflect.Descriptor instead.
func (*TradesResponse) Descriptor() ([]byte, []int) {
	return file_trade_query_proto_rawDescGZIP(), []int{1}
}

func (x *TradesResponse) GetTrades() []*TradeInfo {
	if x != nil {
		return x.Trades
	}
	return nil
}

type TradingVolumePerWeekRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId string `protobuf:"bytes,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	From       uint64 `protobuf:"varint,2,opt,name=from,proto3" json:"from,omitempty"`
	To         uint64 `protobuf:"varint,3,opt,name=to,proto3" json:"to,omitempty"`
}

func (x *TradingVolumePerWeekRequest) Reset() {
	*x = TradingVolumePerWeekRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_query_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradingVolumePerWeekRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradingVolumePerWeekRequest) ProtoMessage() {}

func (x *TradingVolumePerWeekRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trade_query_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradingVolumePerWeekRequest.ProtoReflect.Descriptor instead.
func (*TradingVolumePerWeekRequest) Descriptor() ([]byte, []int) {
	return file_trade_query_proto_rawDescGZIP(), []int{2}
}

func (x *TradingVolumePerWeekRequest) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *TradingVolumePerWeekRequest) GetFrom() uint64 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *TradingVolumePerWeekRequest) GetTo() uint64 {
	if x != nil {
		return x.To
	}
	return 0
}

type TradingVolumePerWeekResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradingVolume []*TradeVolumeByWeek `protobuf:"bytes,1,rep,name=trading_volume,json=tradingVolume,proto3" json:"trading_volume,omitempty"`
}

func (x *TradingVolumePerWeekResponse) Reset() {
	*x = TradingVolumePerWeekResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_query_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradingVolumePerWeekResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradingVolumePerWeekResponse) ProtoMessage() {}

func (x *TradingVolumePerWeekResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trade_query_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradingVolumePerWeekResponse.ProtoReflect.Descriptor instead.
func (*TradingVolumePerWeekResponse) Descriptor() ([]byte, []int) {
	return file_trade_query_proto_rawDescGZIP(), []int{3}
}

func (x *TradingVolumePerWeekResponse) GetTradingVolume() []*TradeVolumeByWeek {
	if x != nil {
		return x.TradingVolume
	}
	return nil
}

type TradingVolumePerMonthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId string `protobuf:"bytes,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	From       uint64 `protobuf:"varint,2,opt,name=from,proto3" json:"from,omitempty"`
	To         uint64 `protobuf:"varint,3,opt,name=to,proto3" json:"to,omitempty"`
}

func (x *TradingVolumePerMonthRequest) Reset() {
	*x = TradingVolumePerMonthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_query_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradingVolumePerMonthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradingVolumePerMonthRequest) ProtoMessage() {}

func (x *TradingVolumePerMonthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trade_query_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradingVolumePerMonthRequest.ProtoReflect.Descriptor instead.
func (*TradingVolumePerMonthRequest) Descriptor() ([]byte, []int) {
	return file_trade_query_proto_rawDescGZIP(), []int{4}
}

func (x *TradingVolumePerMonthRequest) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *TradingVolumePerMonthRequest) GetFrom() uint64 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *TradingVolumePerMonthRequest) GetTo() uint64 {
	if x != nil {
		return x.To
	}
	return 0
}

type TradingVolumePerMonthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradingVolume []*TradeVolumeByMonth `protobuf:"bytes,1,rep,name=trading_volume,json=tradingVolume,proto3" json:"trading_volume,omitempty"`
}

func (x *TradingVolumePerMonthResponse) Reset() {
	*x = TradingVolumePerMonthResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_query_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradingVolumePerMonthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradingVolumePerMonthResponse) ProtoMessage() {}

func (x *TradingVolumePerMonthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trade_query_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradingVolumePerMonthResponse.ProtoReflect.Descriptor instead.
func (*TradingVolumePerMonthResponse) Descriptor() ([]byte, []int) {
	return file_trade_query_proto_rawDescGZIP(), []int{5}
}

func (x *TradingVolumePerMonthResponse) GetTradingVolume() []*TradeVolumeByMonth {
	if x != nil {
		return x.TradingVolume
	}
	return nil
}

type TradingVolumePerDayRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId string `protobuf:"bytes,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	From       uint64 `protobuf:"varint,2,opt,name=from,proto3" json:"from,omitempty"`
	To         uint64 `protobuf:"varint,3,opt,name=to,proto3" json:"to,omitempty"`
}

func (x *TradingVolumePerDayRequest) Reset() {
	*x = TradingVolumePerDayRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_query_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradingVolumePerDayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradingVolumePerDayRequest) ProtoMessage() {}

func (x *TradingVolumePerDayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trade_query_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradingVolumePerDayRequest.ProtoReflect.Descriptor instead.
func (*TradingVolumePerDayRequest) Descriptor() ([]byte, []int) {
	return file_trade_query_proto_rawDescGZIP(), []int{6}
}

func (x *TradingVolumePerDayRequest) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *TradingVolumePerDayRequest) GetFrom() uint64 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *TradingVolumePerDayRequest) GetTo() uint64 {
	if x != nil {
		return x.To
	}
	return 0
}

type TradingVolumePerDayResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradingVolume []*TradeVolumeByDate `protobuf:"bytes,1,rep,name=trading_volume,json=tradingVolume,proto3" json:"trading_volume,omitempty"`
}

func (x *TradingVolumePerDayResponse) Reset() {
	*x = TradingVolumePerDayResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_query_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradingVolumePerDayResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradingVolumePerDayResponse) ProtoMessage() {}

func (x *TradingVolumePerDayResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trade_query_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradingVolumePerDayResponse.ProtoReflect.Descriptor instead.
func (*TradingVolumePerDayResponse) Descriptor() ([]byte, []int) {
	return file_trade_query_proto_rawDescGZIP(), []int{7}
}

func (x *TradingVolumePerDayResponse) GetTradingVolume() []*TradeVolumeByDate {
	if x != nil {
		return x.TradingVolume
	}
	return nil
}

type TradingVolumePerHourRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId string `protobuf:"bytes,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	From       uint64 `protobuf:"varint,2,opt,name=from,proto3" json:"from,omitempty"`
	To         uint64 `protobuf:"varint,3,opt,name=to,proto3" json:"to,omitempty"`
}

func (x *TradingVolumePerHourRequest) Reset() {
	*x = TradingVolumePerHourRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_query_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradingVolumePerHourRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradingVolumePerHourRequest) ProtoMessage() {}

func (x *TradingVolumePerHourRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trade_query_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradingVolumePerHourRequest.ProtoReflect.Descriptor instead.
func (*TradingVolumePerHourRequest) Descriptor() ([]byte, []int) {
	return file_trade_query_proto_rawDescGZIP(), []int{8}
}

func (x *TradingVolumePerHourRequest) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *TradingVolumePerHourRequest) GetFrom() uint64 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *TradingVolumePerHourRequest) GetTo() uint64 {
	if x != nil {
		return x.To
	}
	return 0
}

type TradingVolumePerHourResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradingVolume []*TradeVolumeByHour `protobuf:"bytes,1,rep,name=trading_volume,json=tradingVolume,proto3" json:"trading_volume,omitempty"`
}

func (x *TradingVolumePerHourResponse) Reset() {
	*x = TradingVolumePerHourResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_query_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradingVolumePerHourResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradingVolumePerHourResponse) ProtoMessage() {}

func (x *TradingVolumePerHourResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trade_query_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradingVolumePerHourResponse.ProtoReflect.Descriptor instead.
func (*TradingVolumePerHourResponse) Descriptor() ([]byte, []int) {
	return file_trade_query_proto_rawDescGZIP(), []int{9}
}

func (x *TradingVolumePerHourResponse) GetTradingVolume() []*TradeVolumeByHour {
	if x != nil {
		return x.TradingVolume
	}
	return nil
}

type PriceGraphRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId string `protobuf:"bytes,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	From       uint64 `protobuf:"varint,2,opt,name=from,proto3" json:"from,omitempty"`
	To         uint64 `protobuf:"varint,3,opt,name=to,proto3" json:"to,omitempty"`
}

func (x *PriceGraphRequest) Reset() {
	*x = PriceGraphRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_query_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceGraphRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceGraphRequest) ProtoMessage() {}

func (x *PriceGraphRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trade_query_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceGraphRequest.ProtoReflect.Descriptor instead.
func (*PriceGraphRequest) Descriptor() ([]byte, []int) {
	return file_trade_query_proto_rawDescGZIP(), []int{10}
}

func (x *PriceGraphRequest) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *PriceGraphRequest) GetFrom() uint64 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *PriceGraphRequest) GetTo() uint64 {
	if x != nil {
		return x.To
	}
	return 0
}

type PriceGraphResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Graph []*PriceGraph `protobuf:"bytes,1,rep,name=graph,proto3" json:"graph,omitempty"`
}

func (x *PriceGraphResponse) Reset() {
	*x = PriceGraphResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_query_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceGraphResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceGraphResponse) ProtoMessage() {}

func (x *PriceGraphResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trade_query_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceGraphResponse.ProtoReflect.Descriptor instead.
func (*PriceGraphResponse) Descriptor() ([]byte, []int) {
	return file_trade_query_proto_rawDescGZIP(), []int{11}
}

func (x *PriceGraphResponse) GetGraph() []*PriceGraph {
	if x != nil {
		return x.Graph
	}
	return nil
}

type PriceGraphLastWeekRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId string `protobuf:"bytes,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
}

func (x *PriceGraphLastWeekRequest) Reset() {
	*x = PriceGraphLastWeekRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_query_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceGraphLastWeekRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceGraphLastWeekRequest) ProtoMessage() {}

func (x *PriceGraphLastWeekRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trade_query_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceGraphLastWeekRequest.ProtoReflect.Descriptor instead.
func (*PriceGraphLastWeekRequest) Descriptor() ([]byte, []int) {
	return file_trade_query_proto_rawDescGZIP(), []int{12}
}

func (x *PriceGraphLastWeekRequest) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

type PriceGraphLastWeekResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Graph []*PriceGraph `protobuf:"bytes,1,rep,name=graph,proto3" json:"graph,omitempty"`
}

func (x *PriceGraphLastWeekResponse) Reset() {
	*x = PriceGraphLastWeekResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_query_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceGraphLastWeekResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceGraphLastWeekResponse) ProtoMessage() {}

func (x *PriceGraphLastWeekResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trade_query_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceGraphLastWeekResponse.ProtoReflect.Descriptor instead.
func (*PriceGraphLastWeekResponse) Descriptor() ([]byte, []int) {
	return file_trade_query_proto_rawDescGZIP(), []int{13}
}

func (x *PriceGraphLastWeekResponse) GetGraph() []*PriceGraph {
	if x != nil {
		return x.Graph
	}
	return nil
}

type PriceGraphLastMonthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId string `protobuf:"bytes,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
}

func (x *PriceGraphLastMonthRequest) Reset() {
	*x = PriceGraphLastMonthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_query_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceGraphLastMonthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceGraphLastMonthRequest) ProtoMessage() {}

func (x *PriceGraphLastMonthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trade_query_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceGraphLastMonthRequest.ProtoReflect.Descriptor instead.
func (*PriceGraphLastMonthRequest) Descriptor() ([]byte, []int) {
	return file_trade_query_proto_rawDescGZIP(), []int{14}
}

func (x *PriceGraphLastMonthRequest) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

type PriceGraphLastMonthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Graph []*PriceGraph `protobuf:"bytes,1,rep,name=graph,proto3" json:"graph,omitempty"`
}

func (x *PriceGraphLastMonthResponse) Reset() {
	*x = PriceGraphLastMonthResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_query_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceGraphLastMonthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceGraphLastMonthResponse) ProtoMessage() {}

func (x *PriceGraphLastMonthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trade_query_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceGraphLastMonthResponse.ProtoReflect.Descriptor instead.
func (*PriceGraphLastMonthResponse) Descriptor() ([]byte, []int) {
	return file_trade_query_proto_rawDescGZIP(), []int{15}
}

func (x *PriceGraphLastMonthResponse) GetGraph() []*PriceGraph {
	if x != nil {
		return x.Graph
	}
	return nil
}

type PriceGraphLastYearRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId string `protobuf:"bytes,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
}

func (x *PriceGraphLastYearRequest) Reset() {
	*x = PriceGraphLastYearRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_query_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceGraphLastYearRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceGraphLastYearRequest) ProtoMessage() {}

func (x *PriceGraphLastYearRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trade_query_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceGraphLastYearRequest.ProtoReflect.Descriptor instead.
func (*PriceGraphLastYearRequest) Descriptor() ([]byte, []int) {
	return file_trade_query_proto_rawDescGZIP(), []int{16}
}

func (x *PriceGraphLastYearRequest) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

type PriceGraphLastYearResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Graph []*PriceGraph `protobuf:"bytes,1,rep,name=graph,proto3" json:"graph,omitempty"`
}

func (x *PriceGraphLastYearResponse) Reset() {
	*x = PriceGraphLastYearResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_query_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceGraphLastYearResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceGraphLastYearResponse) ProtoMessage() {}

func (x *PriceGraphLastYearResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trade_query_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceGraphLastYearResponse.ProtoReflect.Descriptor instead.
func (*PriceGraphLastYearResponse) Descriptor() ([]byte, []int) {
	return file_trade_query_proto_rawDescGZIP(), []int{17}
}

func (x *PriceGraphLastYearResponse) GetGraph() []*PriceGraph {
	if x != nil {
		return x.Graph
	}
	return nil
}

var File_trade_query_proto protoreflect.FileDescriptor

var file_trade_query_proto_rawDesc = []byte{
	0x0a, 0x11, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x05, 0x74, 0x72, 0x61, 0x64, 0x65, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2f,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x90, 0x01, 0x0a, 0x0d,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x3a,
	0x0a, 0x0e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x28, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x22, 0x62, 0x0a, 0x1b, 0x54, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x57, 0x65,
	0x65, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e,
	0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x74, 0x6f, 0x22, 0x5f,
	0x0a, 0x1c, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50,
	0x65, 0x72, 0x57, 0x65, 0x65, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f,
	0x0a, 0x0e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x42, 0x79, 0x57, 0x65, 0x65, 0x6b,
	0x52, 0x0d, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22,
	0x63, 0x0a, 0x1c, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x50, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04,
	0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x74, 0x6f, 0x22, 0x61, 0x0a, 0x1d, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x61, 0x0a, 0x1a, 0x54, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x44, 0x61, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x74, 0x6f, 0x22, 0x5e, 0x0a, 0x1b, 0x54, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x44, 0x61,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0e, 0x74, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x42, 0x79, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x74, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x62, 0x0a, 0x1b, 0x54, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x48, 0x6f,
	0x75, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e,
	0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x74, 0x6f, 0x22, 0x5f,
	0x0a, 0x1c, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50,
	0x65, 0x72, 0x48, 0x6f, 0x75, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f,
	0x0a, 0x0e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x42, 0x79, 0x48, 0x6f, 0x75, 0x72,
	0x52, 0x0d, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22,
	0x58, 0x0a, 0x11, 0x50, 0x72, 0x69, 0x63, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x74, 0x6f, 0x22, 0x3d, 0x0a, 0x12, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x27, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x70, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x47, 0x72, 0x61, 0x70,
	0x68, 0x52, 0x05, 0x67, 0x72, 0x61, 0x70, 0x68, 0x22, 0x3c, 0x0a, 0x19, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x4c, 0x61, 0x73, 0x74, 0x57, 0x65, 0x65, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x22, 0x45, 0x0a, 0x1a, 0x50, 0x72, 0x69, 0x63, 0x65, 0x47,
	0x72, 0x61, 0x70, 0x68, 0x4c, 0x61, 0x73, 0x74, 0x57, 0x65, 0x65, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x70, 0x68, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x05, 0x67, 0x72, 0x61, 0x70, 0x68, 0x22, 0x3d, 0x0a,
	0x1a, 0x50, 0x72, 0x69, 0x63, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x4c, 0x61, 0x73, 0x74, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x22, 0x46, 0x0a, 0x1b,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x6f,
	0x6e, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x05, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x22, 0x3c, 0x0a, 0x19, 0x50, 0x72, 0x69, 0x63, 0x65, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x4c, 0x61, 0x73, 0x74, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x49, 0x64, 0x22, 0x45, 0x0a, 0x1a, 0x50, 0x72, 0x69, 0x63, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68,
	0x4c, 0x61, 0x73, 0x74, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x27, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x70, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x52, 0x05, 0x67, 0x72, 0x61, 0x70, 0x68, 0x32, 0x8d, 0x09, 0x0a, 0x0a, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x59, 0x0a, 0x06, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x73, 0x12, 0x14, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x62, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12,
	0x12, 0x2f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x73, 0x12, 0x8b, 0x01, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x22, 0x2e, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x50, 0x65, 0x72, 0x57, 0x65, 0x65, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x57, 0x65, 0x65, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x12, 0x22, 0x2f,
	0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x76, 0x6f, 0x6c, 0x2f, 0x7b, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x65, 0x72, 0x77, 0x65, 0x65,
	0x6b, 0x12, 0x8f, 0x01, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x23, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x50, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x24, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23,
	0x2f, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x76, 0x6f, 0x6c, 0x2f, 0x7b, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x65, 0x72, 0x6d, 0x6f,
	0x6e, 0x74, 0x68, 0x12, 0x87, 0x01, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x44, 0x61, 0x79, 0x12, 0x21, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x50, 0x65, 0x72, 0x44, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22,
	0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x44, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f, 0x74, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x2d, 0x76, 0x6f, 0x6c, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x65, 0x72, 0x64, 0x61, 0x79, 0x12, 0x8b, 0x01,
	0x0a, 0x14, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50,
	0x65, 0x72, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x22, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x54,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x48,
	0x6f, 0x75, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x50, 0x65, 0x72, 0x48, 0x6f, 0x75, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x12, 0x22, 0x2f, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x2d, 0x76, 0x6f, 0x6c, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x70, 0x65, 0x72, 0x68, 0x6f, 0x75, 0x72, 0x12, 0x5f, 0x0a, 0x0a, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x12, 0x18, 0x2e, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x2f, 0x7b,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x80, 0x01, 0x0a,
	0x12, 0x50, 0x72, 0x69, 0x63, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x4c, 0x61, 0x73, 0x74, 0x57,
	0x65, 0x65, 0x6b, 0x12, 0x20, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x4c, 0x61, 0x73, 0x74, 0x57, 0x65, 0x65, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x4c, 0x61, 0x73, 0x74, 0x57, 0x65, 0x65, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f,
	0x12, 0x1d, 0x2f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6c, 0x61, 0x73, 0x74, 0x77, 0x65, 0x65, 0x6b, 0x12,
	0x84, 0x01, 0x0a, 0x13, 0x50, 0x72, 0x69, 0x63, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x4c, 0x61,
	0x73, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x21, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x6f,
	0x6e, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x4c, 0x61, 0x73,
	0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x2f, 0x7b,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6c, 0x61, 0x73,
	0x74, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x80, 0x01, 0x0a, 0x12, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x47, 0x72, 0x61, 0x70, 0x68, 0x4c, 0x61, 0x73, 0x74, 0x59, 0x65, 0x61, 0x72, 0x12, 0x20, 0x2e,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68,
	0x4c, 0x61, 0x73, 0x74, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x4c, 0x61, 0x73, 0x74, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x6c, 0x61, 0x73, 0x74, 0x79, 0x65, 0x61, 0x72, 0x42, 0x77, 0x0a, 0x09, 0x63, 0x6f, 0x6d,
	0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x42, 0x0a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x64, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x6f, 0x2f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x2d, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x74, 0x72, 0x61, 0x64, 0x65,
	0xa2, 0x02, 0x03, 0x54, 0x58, 0x58, 0xaa, 0x02, 0x05, 0x54, 0x72, 0x61, 0x64, 0x65, 0xca, 0x02,
	0x05, 0x54, 0x72, 0x61, 0x64, 0x65, 0xe2, 0x02, 0x11, 0x54, 0x72, 0x61, 0x64, 0x65, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x05, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_trade_query_proto_rawDescOnce sync.Once
	file_trade_query_proto_rawDescData = file_trade_query_proto_rawDesc
)

func file_trade_query_proto_rawDescGZIP() []byte {
	file_trade_query_proto_rawDescOnce.Do(func() {
		file_trade_query_proto_rawDescData = protoimpl.X.CompressGZIP(file_trade_query_proto_rawDescData)
	})
	return file_trade_query_proto_rawDescData
}

var file_trade_query_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_trade_query_proto_goTypes = []any{
	(*TradesRequest)(nil),                 // 0: trade.TradesRequest
	(*TradesResponse)(nil),                // 1: trade.TradesResponse
	(*TradingVolumePerWeekRequest)(nil),   // 2: trade.TradingVolumePerWeekRequest
	(*TradingVolumePerWeekResponse)(nil),  // 3: trade.TradingVolumePerWeekResponse
	(*TradingVolumePerMonthRequest)(nil),  // 4: trade.TradingVolumePerMonthRequest
	(*TradingVolumePerMonthResponse)(nil), // 5: trade.TradingVolumePerMonthResponse
	(*TradingVolumePerDayRequest)(nil),    // 6: trade.TradingVolumePerDayRequest
	(*TradingVolumePerDayResponse)(nil),   // 7: trade.TradingVolumePerDayResponse
	(*TradingVolumePerHourRequest)(nil),   // 8: trade.TradingVolumePerHourRequest
	(*TradingVolumePerHourResponse)(nil),  // 9: trade.TradingVolumePerHourResponse
	(*PriceGraphRequest)(nil),             // 10: trade.PriceGraphRequest
	(*PriceGraphResponse)(nil),            // 11: trade.PriceGraphResponse
	(*PriceGraphLastWeekRequest)(nil),     // 12: trade.PriceGraphLastWeekRequest
	(*PriceGraphLastWeekResponse)(nil),    // 13: trade.PriceGraphLastWeekResponse
	(*PriceGraphLastMonthRequest)(nil),    // 14: trade.PriceGraphLastMonthRequest
	(*PriceGraphLastMonthResponse)(nil),   // 15: trade.PriceGraphLastMonthResponse
	(*PriceGraphLastYearRequest)(nil),     // 16: trade.PriceGraphLastYearRequest
	(*PriceGraphLastYearResponse)(nil),    // 17: trade.PriceGraphLastYearResponse
	(*TradeInfo)(nil),                     // 18: trade.TradeInfo
	(*TradeVolumeByWeek)(nil),             // 19: trade.TradeVolumeByWeek
	(*TradeVolumeByMonth)(nil),            // 20: trade.TradeVolumeByMonth
	(*TradeVolumeByDate)(nil),             // 21: trade.TradeVolumeByDate
	(*TradeVolumeByHour)(nil),             // 22: trade.TradeVolumeByHour
	(*PriceGraph)(nil),                    // 23: trade.PriceGraph
}
var file_trade_query_proto_depIdxs = []int32{
	18, // 0: trade.TradesResponse.trades:type_name -> trade.TradeInfo
	19, // 1: trade.TradingVolumePerWeekResponse.trading_volume:type_name -> trade.TradeVolumeByWeek
	20, // 2: trade.TradingVolumePerMonthResponse.trading_volume:type_name -> trade.TradeVolumeByMonth
	21, // 3: trade.TradingVolumePerDayResponse.trading_volume:type_name -> trade.TradeVolumeByDate
	22, // 4: trade.TradingVolumePerHourResponse.trading_volume:type_name -> trade.TradeVolumeByHour
	23, // 5: trade.PriceGraphResponse.graph:type_name -> trade.PriceGraph
	23, // 6: trade.PriceGraphLastWeekResponse.graph:type_name -> trade.PriceGraph
	23, // 7: trade.PriceGraphLastMonthResponse.graph:type_name -> trade.PriceGraph
	23, // 8: trade.PriceGraphLastYearResponse.graph:type_name -> trade.PriceGraph
	0,  // 9: trade.TradeQuery.Trades:input_type -> trade.TradesRequest
	2,  // 10: trade.TradeQuery.TradingVolumePerWeek:input_type -> trade.TradingVolumePerWeekRequest
	4,  // 11: trade.TradeQuery.TradingVolumePerMonth:input_type -> trade.TradingVolumePerMonthRequest
	6,  // 12: trade.TradeQuery.TradingVolumePerDay:input_type -> trade.TradingVolumePerDayRequest
	8,  // 13: trade.TradeQuery.TradingVolumePerHour:input_type -> trade.TradingVolumePerHourRequest
	10, // 14: trade.TradeQuery.PriceGraph:input_type -> trade.PriceGraphRequest
	12, // 15: trade.TradeQuery.PriceGraphLastWeek:input_type -> trade.PriceGraphLastWeekRequest
	14, // 16: trade.TradeQuery.PriceGraphLastMonth:input_type -> trade.PriceGraphLastMonthRequest
	16, // 17: trade.TradeQuery.PriceGraphLastYear:input_type -> trade.PriceGraphLastYearRequest
	1,  // 18: trade.TradeQuery.Trades:output_type -> trade.TradesResponse
	3,  // 19: trade.TradeQuery.TradingVolumePerWeek:output_type -> trade.TradingVolumePerWeekResponse
	5,  // 20: trade.TradeQuery.TradingVolumePerMonth:output_type -> trade.TradingVolumePerMonthResponse
	7,  // 21: trade.TradeQuery.TradingVolumePerDay:output_type -> trade.TradingVolumePerDayResponse
	9,  // 22: trade.TradeQuery.TradingVolumePerHour:output_type -> trade.TradingVolumePerHourResponse
	11, // 23: trade.TradeQuery.PriceGraph:output_type -> trade.PriceGraphResponse
	13, // 24: trade.TradeQuery.PriceGraphLastWeek:output_type -> trade.PriceGraphLastWeekResponse
	15, // 25: trade.TradeQuery.PriceGraphLastMonth:output_type -> trade.PriceGraphLastMonthResponse
	17, // 26: trade.TradeQuery.PriceGraphLastYear:output_type -> trade.PriceGraphLastYearResponse
	18, // [18:27] is the sub-list for method output_type
	9,  // [9:18] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_trade_query_proto_init() }
func file_trade_query_proto_init() {
	if File_trade_query_proto != nil {
		return
	}
	file_trade_trade_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_trade_query_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*TradesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_query_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*TradesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_query_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*TradingVolumePerWeekRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_query_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*TradingVolumePerWeekResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_query_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*TradingVolumePerMonthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_query_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*TradingVolumePerMonthResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_query_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*TradingVolumePerDayRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_query_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*TradingVolumePerDayResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_query_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*TradingVolumePerHourRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_query_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*TradingVolumePerHourResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_query_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*PriceGraphRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_query_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*PriceGraphResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_query_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*PriceGraphLastWeekRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_query_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*PriceGraphLastWeekResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_query_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*PriceGraphLastMonthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_query_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*PriceGraphLastMonthResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_query_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*PriceGraphLastYearRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_query_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*PriceGraphLastYearResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_trade_query_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_trade_query_proto_goTypes,
		DependencyIndexes: file_trade_query_proto_depIdxs,
		MessageInfos:      file_trade_query_proto_msgTypes,
	}.Build()
	File_trade_query_proto = out.File
	file_trade_query_proto_rawDesc = nil
	file_trade_query_proto_goTypes = nil
	file_trade_query_proto_depIdxs = nil
}
