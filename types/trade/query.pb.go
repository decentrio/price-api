// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        (unknown)
// source: trade/query.proto

package trade

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TradesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TickerId      string                 `protobuf:"bytes,1,opt,name=ticker_id,json=tickerId,proto3" json:"ticker_id,omitempty"`
	Type          string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Limit         uint32                 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	StartTime     uint64                 `protobuf:"varint,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime       uint64                 `protobuf:"varint,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TradesRequest) Reset() {
	*x = TradesRequest{}
	mi := &file_trade_query_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TradesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradesRequest) ProtoMessage() {}

func (x *TradesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trade_query_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradesRequest.ProtoReflect.Descriptor instead.
func (*TradesRequest) Descriptor() ([]byte, []int) {
	return file_trade_query_proto_rawDescGZIP(), []int{0}
}

func (x *TradesRequest) GetTickerId() string {
	if x != nil {
		return x.TickerId
	}
	return ""
}

func (x *TradesRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TradesRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *TradesRequest) GetStartTime() uint64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *TradesRequest) GetEndTime() uint64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type TradesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Trades        []*TradeInfo           `protobuf:"bytes,1,rep,name=trades,proto3" json:"trades,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TradesResponse) Reset() {
	*x = TradesResponse{}
	mi := &file_trade_query_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TradesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradesResponse) ProtoMessage() {}

func (x *TradesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trade_query_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradesResponse.ProtoReflect.Descriptor instead.
func (*TradesResponse) Descriptor() ([]byte, []int) {
	return file_trade_query_proto_rawDescGZIP(), []int{1}
}

func (x *TradesResponse) GetTrades() []*TradeInfo {
	if x != nil {
		return x.Trades
	}
	return nil
}

type AdvancedTradesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TickerId      string                 `protobuf:"bytes,1,opt,name=ticker_id,json=tickerId,proto3" json:"ticker_id,omitempty"`
	PoolId        string                 `protobuf:"bytes,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	Address       string                 `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Type          string                 `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Limit         uint32                 `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	StartTime     uint64                 `protobuf:"varint,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime       uint64                 `protobuf:"varint,7,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AdvancedTradesRequest) Reset() {
	*x = AdvancedTradesRequest{}
	mi := &file_trade_query_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdvancedTradesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvancedTradesRequest) ProtoMessage() {}

func (x *AdvancedTradesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trade_query_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvancedTradesRequest.ProtoReflect.Descriptor instead.
func (*AdvancedTradesRequest) Descriptor() ([]byte, []int) {
	return file_trade_query_proto_rawDescGZIP(), []int{2}
}

func (x *AdvancedTradesRequest) GetTickerId() string {
	if x != nil {
		return x.TickerId
	}
	return ""
}

func (x *AdvancedTradesRequest) GetPoolId() string {
	if x != nil {
		return x.PoolId
	}
	return ""
}

func (x *AdvancedTradesRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AdvancedTradesRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AdvancedTradesRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *AdvancedTradesRequest) GetStartTime() uint64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *AdvancedTradesRequest) GetEndTime() uint64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type AdvancedTradesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Trades        []*TradeInfo           `protobuf:"bytes,1,rep,name=trades,proto3" json:"trades,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AdvancedTradesResponse) Reset() {
	*x = AdvancedTradesResponse{}
	mi := &file_trade_query_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdvancedTradesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvancedTradesResponse) ProtoMessage() {}

func (x *AdvancedTradesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trade_query_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvancedTradesResponse.ProtoReflect.Descriptor instead.
func (*AdvancedTradesResponse) Descriptor() ([]byte, []int) {
	return file_trade_query_proto_rawDescGZIP(), []int{3}
}

func (x *AdvancedTradesResponse) GetTrades() []*TradeInfo {
	if x != nil {
		return x.Trades
	}
	return nil
}

type TradingVolumePerWeekRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContractId    string                 `protobuf:"bytes,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	From          uint64                 `protobuf:"varint,2,opt,name=from,proto3" json:"from,omitempty"`
	To            uint64                 `protobuf:"varint,3,opt,name=to,proto3" json:"to,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TradingVolumePerWeekRequest) Reset() {
	*x = TradingVolumePerWeekRequest{}
	mi := &file_trade_query_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TradingVolumePerWeekRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradingVolumePerWeekRequest) ProtoMessage() {}

func (x *TradingVolumePerWeekRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trade_query_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradingVolumePerWeekRequest.ProtoReflect.Descriptor instead.
func (*TradingVolumePerWeekRequest) Descriptor() ([]byte, []int) {
	return file_trade_query_proto_rawDescGZIP(), []int{4}
}

func (x *TradingVolumePerWeekRequest) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *TradingVolumePerWeekRequest) GetFrom() uint64 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *TradingVolumePerWeekRequest) GetTo() uint64 {
	if x != nil {
		return x.To
	}
	return 0
}

type TradingVolumePerWeekResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TradingVolume []*TradeVolumeByWeek   `protobuf:"bytes,1,rep,name=trading_volume,json=tradingVolume,proto3" json:"trading_volume,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TradingVolumePerWeekResponse) Reset() {
	*x = TradingVolumePerWeekResponse{}
	mi := &file_trade_query_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TradingVolumePerWeekResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradingVolumePerWeekResponse) ProtoMessage() {}

func (x *TradingVolumePerWeekResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trade_query_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradingVolumePerWeekResponse.ProtoReflect.Descriptor instead.
func (*TradingVolumePerWeekResponse) Descriptor() ([]byte, []int) {
	return file_trade_query_proto_rawDescGZIP(), []int{5}
}

func (x *TradingVolumePerWeekResponse) GetTradingVolume() []*TradeVolumeByWeek {
	if x != nil {
		return x.TradingVolume
	}
	return nil
}

type TradingVolumePerMonthRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContractId    string                 `protobuf:"bytes,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	From          uint64                 `protobuf:"varint,2,opt,name=from,proto3" json:"from,omitempty"`
	To            uint64                 `protobuf:"varint,3,opt,name=to,proto3" json:"to,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TradingVolumePerMonthRequest) Reset() {
	*x = TradingVolumePerMonthRequest{}
	mi := &file_trade_query_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TradingVolumePerMonthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradingVolumePerMonthRequest) ProtoMessage() {}

func (x *TradingVolumePerMonthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trade_query_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradingVolumePerMonthRequest.ProtoReflect.Descriptor instead.
func (*TradingVolumePerMonthRequest) Descriptor() ([]byte, []int) {
	return file_trade_query_proto_rawDescGZIP(), []int{6}
}

func (x *TradingVolumePerMonthRequest) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *TradingVolumePerMonthRequest) GetFrom() uint64 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *TradingVolumePerMonthRequest) GetTo() uint64 {
	if x != nil {
		return x.To
	}
	return 0
}

type TradingVolumePerMonthResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TradingVolume []*TradeVolumeByMonth  `protobuf:"bytes,1,rep,name=trading_volume,json=tradingVolume,proto3" json:"trading_volume,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TradingVolumePerMonthResponse) Reset() {
	*x = TradingVolumePerMonthResponse{}
	mi := &file_trade_query_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TradingVolumePerMonthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradingVolumePerMonthResponse) ProtoMessage() {}

func (x *TradingVolumePerMonthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trade_query_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradingVolumePerMonthResponse.ProtoReflect.Descriptor instead.
func (*TradingVolumePerMonthResponse) Descriptor() ([]byte, []int) {
	return file_trade_query_proto_rawDescGZIP(), []int{7}
}

func (x *TradingVolumePerMonthResponse) GetTradingVolume() []*TradeVolumeByMonth {
	if x != nil {
		return x.TradingVolume
	}
	return nil
}

type TradingVolumePerDayRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContractId    string                 `protobuf:"bytes,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	From          uint64                 `protobuf:"varint,2,opt,name=from,proto3" json:"from,omitempty"`
	To            uint64                 `protobuf:"varint,3,opt,name=to,proto3" json:"to,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TradingVolumePerDayRequest) Reset() {
	*x = TradingVolumePerDayRequest{}
	mi := &file_trade_query_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TradingVolumePerDayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradingVolumePerDayRequest) ProtoMessage() {}

func (x *TradingVolumePerDayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trade_query_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradingVolumePerDayRequest.ProtoReflect.Descriptor instead.
func (*TradingVolumePerDayRequest) Descriptor() ([]byte, []int) {
	return file_trade_query_proto_rawDescGZIP(), []int{8}
}

func (x *TradingVolumePerDayRequest) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *TradingVolumePerDayRequest) GetFrom() uint64 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *TradingVolumePerDayRequest) GetTo() uint64 {
	if x != nil {
		return x.To
	}
	return 0
}

type TradingVolumePerDayResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TradingVolume []*TradeVolumeByDate   `protobuf:"bytes,1,rep,name=trading_volume,json=tradingVolume,proto3" json:"trading_volume,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TradingVolumePerDayResponse) Reset() {
	*x = TradingVolumePerDayResponse{}
	mi := &file_trade_query_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TradingVolumePerDayResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradingVolumePerDayResponse) ProtoMessage() {}

func (x *TradingVolumePerDayResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trade_query_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradingVolumePerDayResponse.ProtoReflect.Descriptor instead.
func (*TradingVolumePerDayResponse) Descriptor() ([]byte, []int) {
	return file_trade_query_proto_rawDescGZIP(), []int{9}
}

func (x *TradingVolumePerDayResponse) GetTradingVolume() []*TradeVolumeByDate {
	if x != nil {
		return x.TradingVolume
	}
	return nil
}

type TradingVolumePerHourRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContractId    string                 `protobuf:"bytes,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	From          uint64                 `protobuf:"varint,2,opt,name=from,proto3" json:"from,omitempty"`
	To            uint64                 `protobuf:"varint,3,opt,name=to,proto3" json:"to,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TradingVolumePerHourRequest) Reset() {
	*x = TradingVolumePerHourRequest{}
	mi := &file_trade_query_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TradingVolumePerHourRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradingVolumePerHourRequest) ProtoMessage() {}

func (x *TradingVolumePerHourRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trade_query_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradingVolumePerHourRequest.ProtoReflect.Descriptor instead.
func (*TradingVolumePerHourRequest) Descriptor() ([]byte, []int) {
	return file_trade_query_proto_rawDescGZIP(), []int{10}
}

func (x *TradingVolumePerHourRequest) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *TradingVolumePerHourRequest) GetFrom() uint64 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *TradingVolumePerHourRequest) GetTo() uint64 {
	if x != nil {
		return x.To
	}
	return 0
}

type TradingVolumePerHourResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TradingVolume []*TradeVolumeByHour   `protobuf:"bytes,1,rep,name=trading_volume,json=tradingVolume,proto3" json:"trading_volume,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TradingVolumePerHourResponse) Reset() {
	*x = TradingVolumePerHourResponse{}
	mi := &file_trade_query_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TradingVolumePerHourResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradingVolumePerHourResponse) ProtoMessage() {}

func (x *TradingVolumePerHourResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trade_query_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradingVolumePerHourResponse.ProtoReflect.Descriptor instead.
func (*TradingVolumePerHourResponse) Descriptor() ([]byte, []int) {
	return file_trade_query_proto_rawDescGZIP(), []int{11}
}

func (x *TradingVolumePerHourResponse) GetTradingVolume() []*TradeVolumeByHour {
	if x != nil {
		return x.TradingVolume
	}
	return nil
}

type PriceGraphRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContractId    string                 `protobuf:"bytes,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	From          uint64                 `protobuf:"varint,2,opt,name=from,proto3" json:"from,omitempty"`
	To            uint64                 `protobuf:"varint,3,opt,name=to,proto3" json:"to,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PriceGraphRequest) Reset() {
	*x = PriceGraphRequest{}
	mi := &file_trade_query_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PriceGraphRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceGraphRequest) ProtoMessage() {}

func (x *PriceGraphRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trade_query_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceGraphRequest.ProtoReflect.Descriptor instead.
func (*PriceGraphRequest) Descriptor() ([]byte, []int) {
	return file_trade_query_proto_rawDescGZIP(), []int{12}
}

func (x *PriceGraphRequest) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *PriceGraphRequest) GetFrom() uint64 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *PriceGraphRequest) GetTo() uint64 {
	if x != nil {
		return x.To
	}
	return 0
}

type PriceGraphResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Graph         []*PriceGraph          `protobuf:"bytes,1,rep,name=graph,proto3" json:"graph,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PriceGraphResponse) Reset() {
	*x = PriceGraphResponse{}
	mi := &file_trade_query_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PriceGraphResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceGraphResponse) ProtoMessage() {}

func (x *PriceGraphResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trade_query_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceGraphResponse.ProtoReflect.Descriptor instead.
func (*PriceGraphResponse) Descriptor() ([]byte, []int) {
	return file_trade_query_proto_rawDescGZIP(), []int{13}
}

func (x *PriceGraphResponse) GetGraph() []*PriceGraph {
	if x != nil {
		return x.Graph
	}
	return nil
}

type PriceGraphLastWeekRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContractId    string                 `protobuf:"bytes,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PriceGraphLastWeekRequest) Reset() {
	*x = PriceGraphLastWeekRequest{}
	mi := &file_trade_query_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PriceGraphLastWeekRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceGraphLastWeekRequest) ProtoMessage() {}

func (x *PriceGraphLastWeekRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trade_query_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceGraphLastWeekRequest.ProtoReflect.Descriptor instead.
func (*PriceGraphLastWeekRequest) Descriptor() ([]byte, []int) {
	return file_trade_query_proto_rawDescGZIP(), []int{14}
}

func (x *PriceGraphLastWeekRequest) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

type PriceGraphLastWeekResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Graph         []*PriceGraph          `protobuf:"bytes,1,rep,name=graph,proto3" json:"graph,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PriceGraphLastWeekResponse) Reset() {
	*x = PriceGraphLastWeekResponse{}
	mi := &file_trade_query_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PriceGraphLastWeekResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceGraphLastWeekResponse) ProtoMessage() {}

func (x *PriceGraphLastWeekResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trade_query_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceGraphLastWeekResponse.ProtoReflect.Descriptor instead.
func (*PriceGraphLastWeekResponse) Descriptor() ([]byte, []int) {
	return file_trade_query_proto_rawDescGZIP(), []int{15}
}

func (x *PriceGraphLastWeekResponse) GetGraph() []*PriceGraph {
	if x != nil {
		return x.Graph
	}
	return nil
}

type PriceGraphLastMonthRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContractId    string                 `protobuf:"bytes,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PriceGraphLastMonthRequest) Reset() {
	*x = PriceGraphLastMonthRequest{}
	mi := &file_trade_query_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PriceGraphLastMonthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceGraphLastMonthRequest) ProtoMessage() {}

func (x *PriceGraphLastMonthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trade_query_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceGraphLastMonthRequest.ProtoReflect.Descriptor instead.
func (*PriceGraphLastMonthRequest) Descriptor() ([]byte, []int) {
	return file_trade_query_proto_rawDescGZIP(), []int{16}
}

func (x *PriceGraphLastMonthRequest) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

type PriceGraphLastMonthResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Graph         []*PriceGraph          `protobuf:"bytes,1,rep,name=graph,proto3" json:"graph,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PriceGraphLastMonthResponse) Reset() {
	*x = PriceGraphLastMonthResponse{}
	mi := &file_trade_query_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PriceGraphLastMonthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceGraphLastMonthResponse) ProtoMessage() {}

func (x *PriceGraphLastMonthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trade_query_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceGraphLastMonthResponse.ProtoReflect.Descriptor instead.
func (*PriceGraphLastMonthResponse) Descriptor() ([]byte, []int) {
	return file_trade_query_proto_rawDescGZIP(), []int{17}
}

func (x *PriceGraphLastMonthResponse) GetGraph() []*PriceGraph {
	if x != nil {
		return x.Graph
	}
	return nil
}

type PriceGraphLastYearRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContractId    string                 `protobuf:"bytes,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PriceGraphLastYearRequest) Reset() {
	*x = PriceGraphLastYearRequest{}
	mi := &file_trade_query_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PriceGraphLastYearRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceGraphLastYearRequest) ProtoMessage() {}

func (x *PriceGraphLastYearRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trade_query_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceGraphLastYearRequest.ProtoReflect.Descriptor instead.
func (*PriceGraphLastYearRequest) Descriptor() ([]byte, []int) {
	return file_trade_query_proto_rawDescGZIP(), []int{18}
}

func (x *PriceGraphLastYearRequest) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

type PriceGraphLastYearResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Graph         []*PriceGraph          `protobuf:"bytes,1,rep,name=graph,proto3" json:"graph,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PriceGraphLastYearResponse) Reset() {
	*x = PriceGraphLastYearResponse{}
	mi := &file_trade_query_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PriceGraphLastYearResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceGraphLastYearResponse) ProtoMessage() {}

func (x *PriceGraphLastYearResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trade_query_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceGraphLastYearResponse.ProtoReflect.Descriptor instead.
func (*PriceGraphLastYearResponse) Descriptor() ([]byte, []int) {
	return file_trade_query_proto_rawDescGZIP(), []int{19}
}

func (x *PriceGraphLastYearResponse) GetGraph() []*PriceGraph {
	if x != nil {
		return x.Graph
	}
	return nil
}

type TradeHistoricalRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	From          uint64                 `protobuf:"varint,2,opt,name=from,proto3" json:"from,omitempty"`
	To            uint64                 `protobuf:"varint,3,opt,name=to,proto3" json:"to,omitempty"`
	Page          int32                  `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	PageSize      int32                  `protobuf:"varint,5,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TradeHistoricalRequest) Reset() {
	*x = TradeHistoricalRequest{}
	mi := &file_trade_query_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TradeHistoricalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeHistoricalRequest) ProtoMessage() {}

func (x *TradeHistoricalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trade_query_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeHistoricalRequest.ProtoReflect.Descriptor instead.
func (*TradeHistoricalRequest) Descriptor() ([]byte, []int) {
	return file_trade_query_proto_rawDescGZIP(), []int{20}
}

func (x *TradeHistoricalRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *TradeHistoricalRequest) GetFrom() uint64 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *TradeHistoricalRequest) GetTo() uint64 {
	if x != nil {
		return x.To
	}
	return 0
}

func (x *TradeHistoricalRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *TradeHistoricalRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type TradeHistoricalResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Trades        []*TradeInfo           `protobuf:"bytes,1,rep,name=trades,proto3" json:"trades,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TradeHistoricalResponse) Reset() {
	*x = TradeHistoricalResponse{}
	mi := &file_trade_query_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TradeHistoricalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeHistoricalResponse) ProtoMessage() {}

func (x *TradeHistoricalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trade_query_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeHistoricalResponse.ProtoReflect.Descriptor instead.
func (*TradeHistoricalResponse) Descriptor() ([]byte, []int) {
	return file_trade_query_proto_rawDescGZIP(), []int{21}
}

func (x *TradeHistoricalResponse) GetTrades() []*TradeInfo {
	if x != nil {
		return x.Trades
	}
	return nil
}

type LastWeekTradeHistoricalRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LastWeekTradeHistoricalRequest) Reset() {
	*x = LastWeekTradeHistoricalRequest{}
	mi := &file_trade_query_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LastWeekTradeHistoricalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastWeekTradeHistoricalRequest) ProtoMessage() {}

func (x *LastWeekTradeHistoricalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trade_query_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastWeekTradeHistoricalRequest.ProtoReflect.Descriptor instead.
func (*LastWeekTradeHistoricalRequest) Descriptor() ([]byte, []int) {
	return file_trade_query_proto_rawDescGZIP(), []int{22}
}

func (x *LastWeekTradeHistoricalRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type LastWeekTradeHistoricalResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Trades        []*TradeInfo           `protobuf:"bytes,1,rep,name=trades,proto3" json:"trades,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LastWeekTradeHistoricalResponse) Reset() {
	*x = LastWeekTradeHistoricalResponse{}
	mi := &file_trade_query_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LastWeekTradeHistoricalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastWeekTradeHistoricalResponse) ProtoMessage() {}

func (x *LastWeekTradeHistoricalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trade_query_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastWeekTradeHistoricalResponse.ProtoReflect.Descriptor instead.
func (*LastWeekTradeHistoricalResponse) Descriptor() ([]byte, []int) {
	return file_trade_query_proto_rawDescGZIP(), []int{23}
}

func (x *LastWeekTradeHistoricalResponse) GetTrades() []*TradeInfo {
	if x != nil {
		return x.Trades
	}
	return nil
}

type LastMonthTradeHistoricalRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LastMonthTradeHistoricalRequest) Reset() {
	*x = LastMonthTradeHistoricalRequest{}
	mi := &file_trade_query_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LastMonthTradeHistoricalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastMonthTradeHistoricalRequest) ProtoMessage() {}

func (x *LastMonthTradeHistoricalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trade_query_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastMonthTradeHistoricalRequest.ProtoReflect.Descriptor instead.
func (*LastMonthTradeHistoricalRequest) Descriptor() ([]byte, []int) {
	return file_trade_query_proto_rawDescGZIP(), []int{24}
}

func (x *LastMonthTradeHistoricalRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type LastMonthTradeHistoricalResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Trades        []*TradeInfo           `protobuf:"bytes,1,rep,name=trades,proto3" json:"trades,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LastMonthTradeHistoricalResponse) Reset() {
	*x = LastMonthTradeHistoricalResponse{}
	mi := &file_trade_query_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LastMonthTradeHistoricalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastMonthTradeHistoricalResponse) ProtoMessage() {}

func (x *LastMonthTradeHistoricalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trade_query_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastMonthTradeHistoricalResponse.ProtoReflect.Descriptor instead.
func (*LastMonthTradeHistoricalResponse) Descriptor() ([]byte, []int) {
	return file_trade_query_proto_rawDescGZIP(), []int{25}
}

func (x *LastMonthTradeHistoricalResponse) GetTrades() []*TradeInfo {
	if x != nil {
		return x.Trades
	}
	return nil
}

type LastYearTradeHistoricalRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LastYearTradeHistoricalRequest) Reset() {
	*x = LastYearTradeHistoricalRequest{}
	mi := &file_trade_query_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LastYearTradeHistoricalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastYearTradeHistoricalRequest) ProtoMessage() {}

func (x *LastYearTradeHistoricalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trade_query_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastYearTradeHistoricalRequest.ProtoReflect.Descriptor instead.
func (*LastYearTradeHistoricalRequest) Descriptor() ([]byte, []int) {
	return file_trade_query_proto_rawDescGZIP(), []int{26}
}

func (x *LastYearTradeHistoricalRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type LastYearTradeHistoricalResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Trades        []*TradeInfo           `protobuf:"bytes,1,rep,name=trades,proto3" json:"trades,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LastYearTradeHistoricalResponse) Reset() {
	*x = LastYearTradeHistoricalResponse{}
	mi := &file_trade_query_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LastYearTradeHistoricalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastYearTradeHistoricalResponse) ProtoMessage() {}

func (x *LastYearTradeHistoricalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trade_query_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastYearTradeHistoricalResponse.ProtoReflect.Descriptor instead.
func (*LastYearTradeHistoricalResponse) Descriptor() ([]byte, []int) {
	return file_trade_query_proto_rawDescGZIP(), []int{27}
}

func (x *LastYearTradeHistoricalResponse) GetTrades() []*TradeInfo {
	if x != nil {
		return x.Trades
	}
	return nil
}

type SharesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	PoolId        string                 `protobuf:"bytes,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SharesRequest) Reset() {
	*x = SharesRequest{}
	mi := &file_trade_query_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SharesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharesRequest) ProtoMessage() {}

func (x *SharesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trade_query_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharesRequest.ProtoReflect.Descriptor instead.
func (*SharesRequest) Descriptor() ([]byte, []int) {
	return file_trade_query_proto_rawDescGZIP(), []int{28}
}

func (x *SharesRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *SharesRequest) GetPoolId() string {
	if x != nil {
		return x.PoolId
	}
	return ""
}

type SharesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Shares        uint64                 `protobuf:"varint,1,opt,name=shares,proto3" json:"shares,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SharesResponse) Reset() {
	*x = SharesResponse{}
	mi := &file_trade_query_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SharesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharesResponse) ProtoMessage() {}

func (x *SharesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trade_query_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharesResponse.ProtoReflect.Descriptor instead.
func (*SharesResponse) Descriptor() ([]byte, []int) {
	return file_trade_query_proto_rawDescGZIP(), []int{29}
}

func (x *SharesResponse) GetShares() uint64 {
	if x != nil {
		return x.Shares
	}
	return 0
}

type LockSharesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	PoolId        string                 `protobuf:"bytes,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LockSharesRequest) Reset() {
	*x = LockSharesRequest{}
	mi := &file_trade_query_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LockSharesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockSharesRequest) ProtoMessage() {}

func (x *LockSharesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trade_query_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockSharesRequest.ProtoReflect.Descriptor instead.
func (*LockSharesRequest) Descriptor() ([]byte, []int) {
	return file_trade_query_proto_rawDescGZIP(), []int{30}
}

func (x *LockSharesRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *LockSharesRequest) GetPoolId() string {
	if x != nil {
		return x.PoolId
	}
	return ""
}

type LockSharesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Shares        uint64                 `protobuf:"varint,1,opt,name=shares,proto3" json:"shares,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LockSharesResponse) Reset() {
	*x = LockSharesResponse{}
	mi := &file_trade_query_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LockSharesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockSharesResponse) ProtoMessage() {}

func (x *LockSharesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trade_query_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockSharesResponse.ProtoReflect.Descriptor instead.
func (*LockSharesResponse) Descriptor() ([]byte, []int) {
	return file_trade_query_proto_rawDescGZIP(), []int{31}
}

func (x *LockSharesResponse) GetShares() uint64 {
	if x != nil {
		return x.Shares
	}
	return 0
}

type TotalTradesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TotalTradesRequest) Reset() {
	*x = TotalTradesRequest{}
	mi := &file_trade_query_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TotalTradesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TotalTradesRequest) ProtoMessage() {}

func (x *TotalTradesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trade_query_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TotalTradesRequest.ProtoReflect.Descriptor instead.
func (*TotalTradesRequest) Descriptor() ([]byte, []int) {
	return file_trade_query_proto_rawDescGZIP(), []int{32}
}

type TotalTradesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TotalTrades   int64                  `protobuf:"varint,1,opt,name=total_trades,json=totalTrades,proto3" json:"total_trades,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TotalTradesResponse) Reset() {
	*x = TotalTradesResponse{}
	mi := &file_trade_query_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TotalTradesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TotalTradesResponse) ProtoMessage() {}

func (x *TotalTradesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trade_query_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TotalTradesResponse.ProtoReflect.Descriptor instead.
func (*TotalTradesResponse) Descriptor() ([]byte, []int) {
	return file_trade_query_proto_rawDescGZIP(), []int{33}
}

func (x *TotalTradesResponse) GetTotalTrades() int64 {
	if x != nil {
		return x.TotalTrades
	}
	return 0
}

type MostTradedRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MostTradedRequest) Reset() {
	*x = MostTradedRequest{}
	mi := &file_trade_query_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MostTradedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MostTradedRequest) ProtoMessage() {}

func (x *MostTradedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trade_query_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MostTradedRequest.ProtoReflect.Descriptor instead.
func (*MostTradedRequest) Descriptor() ([]byte, []int) {
	return file_trade_query_proto_rawDescGZIP(), []int{34}
}

type MostTradedResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Asset         string                 `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"`
	UsdVolume     float64                `protobuf:"fixed64,2,opt,name=usd_volume,json=usdVolume,proto3" json:"usd_volume,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MostTradedResponse) Reset() {
	*x = MostTradedResponse{}
	mi := &file_trade_query_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MostTradedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MostTradedResponse) ProtoMessage() {}

func (x *MostTradedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trade_query_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MostTradedResponse.ProtoReflect.Descriptor instead.
func (*MostTradedResponse) Descriptor() ([]byte, []int) {
	return file_trade_query_proto_rawDescGZIP(), []int{35}
}

func (x *MostTradedResponse) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *MostTradedResponse) GetUsdVolume() float64 {
	if x != nil {
		return x.UsdVolume
	}
	return 0
}

type TokenPricesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	From          uint64                 `protobuf:"varint,2,opt,name=from,proto3" json:"from,omitempty"`
	To            uint64                 `protobuf:"varint,3,opt,name=to,proto3" json:"to,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TokenPricesRequest) Reset() {
	*x = TokenPricesRequest{}
	mi := &file_trade_query_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenPricesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenPricesRequest) ProtoMessage() {}

func (x *TokenPricesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trade_query_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenPricesRequest.ProtoReflect.Descriptor instead.
func (*TokenPricesRequest) Descriptor() ([]byte, []int) {
	return file_trade_query_proto_rawDescGZIP(), []int{36}
}

func (x *TokenPricesRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TokenPricesRequest) GetFrom() uint64 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *TokenPricesRequest) GetTo() uint64 {
	if x != nil {
		return x.To
	}
	return 0
}

type TokenPricesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Prices        []*TokenPrice          `protobuf:"bytes,1,rep,name=prices,proto3" json:"prices,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TokenPricesResponse) Reset() {
	*x = TokenPricesResponse{}
	mi := &file_trade_query_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenPricesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenPricesResponse) ProtoMessage() {}

func (x *TokenPricesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trade_query_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenPricesResponse.ProtoReflect.Descriptor instead.
func (*TokenPricesResponse) Descriptor() ([]byte, []int) {
	return file_trade_query_proto_rawDescGZIP(), []int{37}
}

func (x *TokenPricesResponse) GetPrices() []*TokenPrice {
	if x != nil {
		return x.Prices
	}
	return nil
}

var File_trade_query_proto protoreflect.FileDescriptor

var file_trade_query_proto_rawDesc = []byte{
	0x0a, 0x11, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x05, 0x74, 0x72, 0x61, 0x64, 0x65, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2f,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x90,
	0x01, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x3a, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x22, 0xcb, 0x01,
	0x0a, 0x15, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x42, 0x0a, 0x16, 0x41,
	0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x22,
	0x62, 0x0a, 0x1b, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x50, 0x65, 0x72, 0x57, 0x65, 0x65, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x74, 0x6f, 0x22, 0x5f, 0x0a, 0x1c, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x57, 0x65, 0x65, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x42,
	0x79, 0x57, 0x65, 0x65, 0x6b, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x22, 0x63, 0x0a, 0x1c, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x74, 0x6f, 0x22, 0x61, 0x0a, 0x1d, 0x54, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x74, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x0d, 0x74,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x61, 0x0a, 0x1a,
	0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x65, 0x72,
	0x44, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12,
	0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x74, 0x6f, 0x22,
	0x5e, 0x0a, 0x1b, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x50, 0x65, 0x72, 0x44, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f,
	0x0a, 0x0e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x42, 0x79, 0x44, 0x61, 0x74, 0x65,
	0x52, 0x0d, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22,
	0x62, 0x0a, 0x1b, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x50, 0x65, 0x72, 0x48, 0x6f, 0x75, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x74, 0x6f, 0x22, 0x5f, 0x0a, 0x1c, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x75, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x42,
	0x79, 0x48, 0x6f, 0x75, 0x72, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x22, 0x58, 0x0a, 0x11, 0x50, 0x72, 0x69, 0x63, 0x65, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e,
	0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x74, 0x6f, 0x22, 0x3d,
	0x0a, 0x12, 0x50, 0x72, 0x69, 0x63, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x70, 0x68, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x05, 0x67, 0x72, 0x61, 0x70, 0x68, 0x22, 0x3c, 0x0a,
	0x19, 0x50, 0x72, 0x69, 0x63, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x4c, 0x61, 0x73, 0x74, 0x57,
	0x65, 0x65, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x22, 0x45, 0x0a, 0x1a, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x4c, 0x61, 0x73, 0x74, 0x57, 0x65, 0x65,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x05, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x22, 0x3d, 0x0a, 0x1a, 0x50, 0x72, 0x69, 0x63, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68,
	0x4c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49,
	0x64, 0x22, 0x46, 0x0a, 0x1b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x4c,
	0x61, 0x73, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x27, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x70, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x52, 0x05, 0x67, 0x72, 0x61, 0x70, 0x68, 0x22, 0x3c, 0x0a, 0x19, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x4c, 0x61, 0x73, 0x74, 0x59, 0x65, 0x61, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x22, 0x45, 0x0a, 0x1a, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x47, 0x72, 0x61, 0x70, 0x68, 0x4c, 0x61, 0x73, 0x74, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x70, 0x68, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x05, 0x67, 0x72, 0x61, 0x70, 0x68, 0x22, 0x87,
	0x01, 0x0a, 0x16, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63,
	0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x43, 0x0a, 0x17, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x22, 0x3a, 0x0a,
	0x1e, 0x4c, 0x61, 0x73, 0x74, 0x57, 0x65, 0x65, 0x6b, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x4b, 0x0a, 0x1f, 0x4c, 0x61, 0x73,
	0x74, 0x57, 0x65, 0x65, 0x6b, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x06,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x22, 0x3b, 0x0a, 0x1f, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x6f,
	0x6e, 0x74, 0x68, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63,
	0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x22, 0x4c, 0x0a, 0x20, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x73, 0x22, 0x3a, 0x0a, 0x1e, 0x4c, 0x61, 0x73, 0x74, 0x59, 0x65, 0x61, 0x72, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x4b, 0x0a,
	0x1f, 0x4c, 0x61, 0x73, 0x74, 0x59, 0x65, 0x61, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x28, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x22, 0x42, 0x0a, 0x0d, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x22, 0x28,
	0x0a, 0x0e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x22, 0x46, 0x0a, 0x11, 0x4c, 0x6f, 0x63, 0x6b,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x6f, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64,
	0x22, 0x2c, 0x0a, 0x12, 0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x22, 0x14,
	0x0a, 0x12, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x38, 0x0a, 0x13, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x22, 0x13,
	0x0a, 0x11, 0x4d, 0x6f, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x49, 0x0a, 0x12, 0x4d, 0x6f, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x64, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x75, 0x73, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x48,
	0x0a, 0x12, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x74, 0x6f, 0x22, 0x40, 0x0a, 0x13, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x29, 0x0a, 0x06, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x52, 0x06, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x32, 0x9b, 0x12, 0x0a, 0x0a, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x59, 0x0a, 0x06, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x73, 0x12, 0x14, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x62, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73,
	0x12, 0x12, 0x2f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x73, 0x12, 0x66, 0x0a, 0x0e, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x1c, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x41,
	0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x41, 0x64, 0x76,
	0x61, 0x6e, 0x63, 0x65, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x62, 0x06, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x73, 0x12, 0x07, 0x2f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x06,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x14, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x73, 0x2f, 0x7b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x7d, 0x2f, 0x7b,
	0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x6b, 0x0a, 0x0a, 0x4c, 0x6f, 0x63, 0x6b,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x18, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x4c,
	0x6f, 0x63, 0x6b, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x19, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x6c, 0x6f, 0x63, 0x6b, 0x2d, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x73, 0x2f, 0x7b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x7d, 0x2f, 0x7b, 0x70, 0x6f, 0x6f,
	0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x8b, 0x01, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x22,
	0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x57, 0x65, 0x65, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x23, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x57, 0x65, 0x65, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x12,
	0x22, 0x2f, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x76, 0x6f, 0x6c, 0x2f, 0x7b, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x65, 0x72, 0x77,
	0x65, 0x65, 0x6b, 0x12, 0x8f, 0x01, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x23, 0x2e,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25,
	0x12, 0x23, 0x2f, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x76, 0x6f, 0x6c, 0x2f, 0x7b,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x65, 0x72,
	0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x87, 0x01, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x44, 0x61, 0x79, 0x12, 0x21, 0x2e,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x44, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x22, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x44, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f, 0x74,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x76, 0x6f, 0x6c, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x65, 0x72, 0x64, 0x61, 0x79, 0x12,
	0x8b, 0x01, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x22, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x2e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x65,
	0x72, 0x48, 0x6f, 0x75, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x75, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x12, 0x22, 0x2f, 0x74, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x2d, 0x76, 0x6f, 0x6c, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x65, 0x72, 0x68, 0x6f, 0x75, 0x72, 0x12, 0x5f, 0x0a,
	0x0a, 0x50, 0x72, 0x69, 0x63, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x12, 0x18, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x80,
	0x01, 0x0a, 0x12, 0x50, 0x72, 0x69, 0x63, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x4c, 0x61, 0x73,
	0x74, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x20, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x4c, 0x61, 0x73, 0x74, 0x57, 0x65, 0x65, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x4c, 0x61, 0x73, 0x74, 0x57, 0x65,
	0x65, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6c, 0x61, 0x73, 0x74, 0x77, 0x65, 0x65,
	0x6b, 0x12, 0x84, 0x01, 0x0a, 0x13, 0x50, 0x72, 0x69, 0x63, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68,
	0x4c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x21, 0x2e, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x4c, 0x61, 0x73, 0x74,
	0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x4c,
	0x61, 0x73, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6c,
	0x61, 0x73, 0x74, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x80, 0x01, 0x0a, 0x12, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x4c, 0x61, 0x73, 0x74, 0x59, 0x65, 0x61, 0x72, 0x12,
	0x20, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x4c, 0x61, 0x73, 0x74, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x47,
	0x72, 0x61, 0x70, 0x68, 0x4c, 0x61, 0x73, 0x74, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x6c, 0x61, 0x73, 0x74, 0x79, 0x65, 0x61, 0x72, 0x12, 0x73, 0x0a, 0x10, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x73, 0x12,
	0x1d, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e,
	0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2d, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x7b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x7d,
	0x12, 0x94, 0x01, 0x0a, 0x18, 0x4c, 0x61, 0x73, 0x74, 0x57, 0x65, 0x65, 0x6b, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x73, 0x12, 0x25, 0x2e,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x57, 0x65, 0x65, 0x6b, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x4c, 0x61, 0x73,
	0x74, 0x57, 0x65, 0x65, 0x6b, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2d, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x2f, 0x7b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x7d, 0x2f, 0x6c,
	0x61, 0x73, 0x74, 0x77, 0x65, 0x65, 0x6b, 0x12, 0x98, 0x01, 0x0a, 0x19, 0x4c, 0x61, 0x73, 0x74,
	0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x69, 0x63, 0x61, 0x6c, 0x73, 0x12, 0x26, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x4c, 0x61,
	0x73, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x12, 0x22,
	0x2f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2d, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x7b,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x7d, 0x2f, 0x6c, 0x61, 0x73, 0x74, 0x6d, 0x6f, 0x6e,
	0x74, 0x68, 0x12, 0x94, 0x01, 0x0a, 0x18, 0x4c, 0x61, 0x73, 0x74, 0x59, 0x65, 0x61, 0x72, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x73, 0x12,
	0x25, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x59, 0x65, 0x61, 0x72,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x4c,
	0x61, 0x73, 0x74, 0x59, 0x65, 0x61, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2d, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x7b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x7d,
	0x2f, 0x6c, 0x61, 0x73, 0x74, 0x79, 0x65, 0x61, 0x72, 0x12, 0x5b, 0x0a, 0x0b, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x19, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x2e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73,
	0x2f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x5e, 0x0a, 0x0a, 0x4d, 0x6f, 0x73, 0x74, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x64, 0x12, 0x18, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x4d, 0x6f, 0x73,
	0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19,
	0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x4d, 0x6f, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x15, 0x12, 0x13, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x6d, 0x6f, 0x73, 0x74, 0x2d,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x64, 0x12, 0x60, 0x0a, 0x0b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x73, 0x12, 0x19, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x42, 0x77, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x2e,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x42, 0x0a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x64, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x6f, 0x2f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x2d,
	0x61, 0x70, 0x69, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x74, 0x72, 0x61, 0x64, 0x65, 0xa2,
	0x02, 0x03, 0x54, 0x58, 0x58, 0xaa, 0x02, 0x05, 0x54, 0x72, 0x61, 0x64, 0x65, 0xca, 0x02, 0x05,
	0x54, 0x72, 0x61, 0x64, 0x65, 0xe2, 0x02, 0x11, 0x54, 0x72, 0x61, 0x64, 0x65, 0x5c, 0x47, 0x50,
	0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x05, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_trade_query_proto_rawDescOnce sync.Once
	file_trade_query_proto_rawDescData = file_trade_query_proto_rawDesc
)

func file_trade_query_proto_rawDescGZIP() []byte {
	file_trade_query_proto_rawDescOnce.Do(func() {
		file_trade_query_proto_rawDescData = protoimpl.X.CompressGZIP(file_trade_query_proto_rawDescData)
	})
	return file_trade_query_proto_rawDescData
}

var file_trade_query_proto_msgTypes = make([]protoimpl.MessageInfo, 38)
var file_trade_query_proto_goTypes = []any{
	(*TradesRequest)(nil),                    // 0: trade.TradesRequest
	(*TradesResponse)(nil),                   // 1: trade.TradesResponse
	(*AdvancedTradesRequest)(nil),            // 2: trade.AdvancedTradesRequest
	(*AdvancedTradesResponse)(nil),           // 3: trade.AdvancedTradesResponse
	(*TradingVolumePerWeekRequest)(nil),      // 4: trade.TradingVolumePerWeekRequest
	(*TradingVolumePerWeekResponse)(nil),     // 5: trade.TradingVolumePerWeekResponse
	(*TradingVolumePerMonthRequest)(nil),     // 6: trade.TradingVolumePerMonthRequest
	(*TradingVolumePerMonthResponse)(nil),    // 7: trade.TradingVolumePerMonthResponse
	(*TradingVolumePerDayRequest)(nil),       // 8: trade.TradingVolumePerDayRequest
	(*TradingVolumePerDayResponse)(nil),      // 9: trade.TradingVolumePerDayResponse
	(*TradingVolumePerHourRequest)(nil),      // 10: trade.TradingVolumePerHourRequest
	(*TradingVolumePerHourResponse)(nil),     // 11: trade.TradingVolumePerHourResponse
	(*PriceGraphRequest)(nil),                // 12: trade.PriceGraphRequest
	(*PriceGraphResponse)(nil),               // 13: trade.PriceGraphResponse
	(*PriceGraphLastWeekRequest)(nil),        // 14: trade.PriceGraphLastWeekRequest
	(*PriceGraphLastWeekResponse)(nil),       // 15: trade.PriceGraphLastWeekResponse
	(*PriceGraphLastMonthRequest)(nil),       // 16: trade.PriceGraphLastMonthRequest
	(*PriceGraphLastMonthResponse)(nil),      // 17: trade.PriceGraphLastMonthResponse
	(*PriceGraphLastYearRequest)(nil),        // 18: trade.PriceGraphLastYearRequest
	(*PriceGraphLastYearResponse)(nil),       // 19: trade.PriceGraphLastYearResponse
	(*TradeHistoricalRequest)(nil),           // 20: trade.TradeHistoricalRequest
	(*TradeHistoricalResponse)(nil),          // 21: trade.TradeHistoricalResponse
	(*LastWeekTradeHistoricalRequest)(nil),   // 22: trade.LastWeekTradeHistoricalRequest
	(*LastWeekTradeHistoricalResponse)(nil),  // 23: trade.LastWeekTradeHistoricalResponse
	(*LastMonthTradeHistoricalRequest)(nil),  // 24: trade.LastMonthTradeHistoricalRequest
	(*LastMonthTradeHistoricalResponse)(nil), // 25: trade.LastMonthTradeHistoricalResponse
	(*LastYearTradeHistoricalRequest)(nil),   // 26: trade.LastYearTradeHistoricalRequest
	(*LastYearTradeHistoricalResponse)(nil),  // 27: trade.LastYearTradeHistoricalResponse
	(*SharesRequest)(nil),                    // 28: trade.SharesRequest
	(*SharesResponse)(nil),                   // 29: trade.SharesResponse
	(*LockSharesRequest)(nil),                // 30: trade.LockSharesRequest
	(*LockSharesResponse)(nil),               // 31: trade.LockSharesResponse
	(*TotalTradesRequest)(nil),               // 32: trade.TotalTradesRequest
	(*TotalTradesResponse)(nil),              // 33: trade.TotalTradesResponse
	(*MostTradedRequest)(nil),                // 34: trade.MostTradedRequest
	(*MostTradedResponse)(nil),               // 35: trade.MostTradedResponse
	(*TokenPricesRequest)(nil),               // 36: trade.TokenPricesRequest
	(*TokenPricesResponse)(nil),              // 37: trade.TokenPricesResponse
	(*TradeInfo)(nil),                        // 38: trade.TradeInfo
	(*TradeVolumeByWeek)(nil),                // 39: trade.TradeVolumeByWeek
	(*TradeVolumeByMonth)(nil),               // 40: trade.TradeVolumeByMonth
	(*TradeVolumeByDate)(nil),                // 41: trade.TradeVolumeByDate
	(*TradeVolumeByHour)(nil),                // 42: trade.TradeVolumeByHour
	(*PriceGraph)(nil),                       // 43: trade.PriceGraph
	(*TokenPrice)(nil),                       // 44: trade.TokenPrice
}
var file_trade_query_proto_depIdxs = []int32{
	38, // 0: trade.TradesResponse.trades:type_name -> trade.TradeInfo
	38, // 1: trade.AdvancedTradesResponse.trades:type_name -> trade.TradeInfo
	39, // 2: trade.TradingVolumePerWeekResponse.trading_volume:type_name -> trade.TradeVolumeByWeek
	40, // 3: trade.TradingVolumePerMonthResponse.trading_volume:type_name -> trade.TradeVolumeByMonth
	41, // 4: trade.TradingVolumePerDayResponse.trading_volume:type_name -> trade.TradeVolumeByDate
	42, // 5: trade.TradingVolumePerHourResponse.trading_volume:type_name -> trade.TradeVolumeByHour
	43, // 6: trade.PriceGraphResponse.graph:type_name -> trade.PriceGraph
	43, // 7: trade.PriceGraphLastWeekResponse.graph:type_name -> trade.PriceGraph
	43, // 8: trade.PriceGraphLastMonthResponse.graph:type_name -> trade.PriceGraph
	43, // 9: trade.PriceGraphLastYearResponse.graph:type_name -> trade.PriceGraph
	38, // 10: trade.TradeHistoricalResponse.trades:type_name -> trade.TradeInfo
	38, // 11: trade.LastWeekTradeHistoricalResponse.trades:type_name -> trade.TradeInfo
	38, // 12: trade.LastMonthTradeHistoricalResponse.trades:type_name -> trade.TradeInfo
	38, // 13: trade.LastYearTradeHistoricalResponse.trades:type_name -> trade.TradeInfo
	44, // 14: trade.TokenPricesResponse.prices:type_name -> trade.TokenPrice
	0,  // 15: trade.TradeQuery.Trades:input_type -> trade.TradesRequest
	2,  // 16: trade.TradeQuery.AdvancedTrades:input_type -> trade.AdvancedTradesRequest
	28, // 17: trade.TradeQuery.Shares:input_type -> trade.SharesRequest
	30, // 18: trade.TradeQuery.LockShares:input_type -> trade.LockSharesRequest
	4,  // 19: trade.TradeQuery.TradingVolumePerWeek:input_type -> trade.TradingVolumePerWeekRequest
	6,  // 20: trade.TradeQuery.TradingVolumePerMonth:input_type -> trade.TradingVolumePerMonthRequest
	8,  // 21: trade.TradeQuery.TradingVolumePerDay:input_type -> trade.TradingVolumePerDayRequest
	10, // 22: trade.TradeQuery.TradingVolumePerHour:input_type -> trade.TradingVolumePerHourRequest
	12, // 23: trade.TradeQuery.PriceGraph:input_type -> trade.PriceGraphRequest
	14, // 24: trade.TradeQuery.PriceGraphLastWeek:input_type -> trade.PriceGraphLastWeekRequest
	16, // 25: trade.TradeQuery.PriceGraphLastMonth:input_type -> trade.PriceGraphLastMonthRequest
	18, // 26: trade.TradeQuery.PriceGraphLastYear:input_type -> trade.PriceGraphLastYearRequest
	20, // 27: trade.TradeQuery.TradeHistoricals:input_type -> trade.TradeHistoricalRequest
	22, // 28: trade.TradeQuery.LastWeekTradeHistoricals:input_type -> trade.LastWeekTradeHistoricalRequest
	24, // 29: trade.TradeQuery.LastMonthTradeHistoricals:input_type -> trade.LastMonthTradeHistoricalRequest
	26, // 30: trade.TradeQuery.LastYearTradeHistoricals:input_type -> trade.LastYearTradeHistoricalRequest
	32, // 31: trade.TradeQuery.TotalTrades:input_type -> trade.TotalTradesRequest
	34, // 32: trade.TradeQuery.MostTraded:input_type -> trade.MostTradedRequest
	36, // 33: trade.TradeQuery.TokenPrices:input_type -> trade.TokenPricesRequest
	1,  // 34: trade.TradeQuery.Trades:output_type -> trade.TradesResponse
	3,  // 35: trade.TradeQuery.AdvancedTrades:output_type -> trade.AdvancedTradesResponse
	29, // 36: trade.TradeQuery.Shares:output_type -> trade.SharesResponse
	31, // 37: trade.TradeQuery.LockShares:output_type -> trade.LockSharesResponse
	5,  // 38: trade.TradeQuery.TradingVolumePerWeek:output_type -> trade.TradingVolumePerWeekResponse
	7,  // 39: trade.TradeQuery.TradingVolumePerMonth:output_type -> trade.TradingVolumePerMonthResponse
	9,  // 40: trade.TradeQuery.TradingVolumePerDay:output_type -> trade.TradingVolumePerDayResponse
	11, // 41: trade.TradeQuery.TradingVolumePerHour:output_type -> trade.TradingVolumePerHourResponse
	13, // 42: trade.TradeQuery.PriceGraph:output_type -> trade.PriceGraphResponse
	15, // 43: trade.TradeQuery.PriceGraphLastWeek:output_type -> trade.PriceGraphLastWeekResponse
	17, // 44: trade.TradeQuery.PriceGraphLastMonth:output_type -> trade.PriceGraphLastMonthResponse
	19, // 45: trade.TradeQuery.PriceGraphLastYear:output_type -> trade.PriceGraphLastYearResponse
	21, // 46: trade.TradeQuery.TradeHistoricals:output_type -> trade.TradeHistoricalResponse
	23, // 47: trade.TradeQuery.LastWeekTradeHistoricals:output_type -> trade.LastWeekTradeHistoricalResponse
	25, // 48: trade.TradeQuery.LastMonthTradeHistoricals:output_type -> trade.LastMonthTradeHistoricalResponse
	27, // 49: trade.TradeQuery.LastYearTradeHistoricals:output_type -> trade.LastYearTradeHistoricalResponse
	33, // 50: trade.TradeQuery.TotalTrades:output_type -> trade.TotalTradesResponse
	35, // 51: trade.TradeQuery.MostTraded:output_type -> trade.MostTradedResponse
	37, // 52: trade.TradeQuery.TokenPrices:output_type -> trade.TokenPricesResponse
	34, // [34:53] is the sub-list for method output_type
	15, // [15:34] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_trade_query_proto_init() }
func file_trade_query_proto_init() {
	if File_trade_query_proto != nil {
		return
	}
	file_trade_trade_proto_init()
	file_trade_token_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_trade_query_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   38,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_trade_query_proto_goTypes,
		DependencyIndexes: file_trade_query_proto_depIdxs,
		MessageInfos:      file_trade_query_proto_msgTypes,
	}.Build()
	File_trade_query_proto = out.File
	file_trade_query_proto_rawDesc = nil
	file_trade_query_proto_goTypes = nil
	file_trade_query_proto_depIdxs = nil
}
