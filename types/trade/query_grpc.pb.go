// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: trade/query.proto

package trade

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	TradeQuery_Trades_FullMethodName = "/trade.TradeQuery/Trades"
)

// TradeQueryClient is the client API for TradeQuery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TradeQueryClient interface {
	// Trades is used to return data on historical completed trades for a given market pair.
	Trades(ctx context.Context, in *TradesRequest, opts ...grpc.CallOption) (*TradesResponse, error)
}

type tradeQueryClient struct {
	cc grpc.ClientConnInterface
}

func NewTradeQueryClient(cc grpc.ClientConnInterface) TradeQueryClient {
	return &tradeQueryClient{cc}
}

func (c *tradeQueryClient) Trades(ctx context.Context, in *TradesRequest, opts ...grpc.CallOption) (*TradesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TradesResponse)
	err := c.cc.Invoke(ctx, TradeQuery_Trades_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TradeQueryServer is the server API for TradeQuery service.
// All implementations must embed UnimplementedTradeQueryServer
// for forward compatibility
type TradeQueryServer interface {
	// Trades is used to return data on historical completed trades for a given market pair.
	Trades(context.Context, *TradesRequest) (*TradesResponse, error)
	mustEmbedUnimplementedTradeQueryServer()
}

// UnimplementedTradeQueryServer must be embedded to have forward compatible implementations.
type UnimplementedTradeQueryServer struct {
}

func (UnimplementedTradeQueryServer) Trades(context.Context, *TradesRequest) (*TradesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Trades not implemented")
}
func (UnimplementedTradeQueryServer) mustEmbedUnimplementedTradeQueryServer() {}

// UnsafeTradeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TradeQueryServer will
// result in compilation errors.
type UnsafeTradeQueryServer interface {
	mustEmbedUnimplementedTradeQueryServer()
}

func RegisterTradeQueryServer(s grpc.ServiceRegistrar, srv TradeQueryServer) {
	s.RegisterService(&TradeQuery_ServiceDesc, srv)
}

func _TradeQuery_Trades_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeQueryServer).Trades(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeQuery_Trades_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeQueryServer).Trades(ctx, req.(*TradesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TradeQuery_ServiceDesc is the grpc.ServiceDesc for TradeQuery service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TradeQuery_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "trade.TradeQuery",
	HandlerType: (*TradeQueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Trades",
			Handler:    _TradeQuery_Trades_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "trade/query.proto",
}
