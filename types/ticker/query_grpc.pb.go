// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: ticker/query.proto

package ticker

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	TickerQuery_Tickers_FullMethodName                 = "/ticker.TickerQuery/Tickers"
	TickerQuery_PoolTotalLiquidityInUsd_FullMethodName = "/ticker.TickerQuery/PoolTotalLiquidityInUsd"
)

// TickerQueryClient is the client API for TickerQuery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TickerQueryClient interface {
	// Tickers provides 24-hour pricing and volume information.
	Tickers(ctx context.Context, in *TickersRequest, opts ...grpc.CallOption) (*TickersResponse, error)
	// Liquidity
	PoolTotalLiquidityInUsd(ctx context.Context, in *PoolTotalLiquidityInUsdRequest, opts ...grpc.CallOption) (*PoolTotalLiquidityInUsdResponse, error)
}

type tickerQueryClient struct {
	cc grpc.ClientConnInterface
}

func NewTickerQueryClient(cc grpc.ClientConnInterface) TickerQueryClient {
	return &tickerQueryClient{cc}
}

func (c *tickerQueryClient) Tickers(ctx context.Context, in *TickersRequest, opts ...grpc.CallOption) (*TickersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TickersResponse)
	err := c.cc.Invoke(ctx, TickerQuery_Tickers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tickerQueryClient) PoolTotalLiquidityInUsd(ctx context.Context, in *PoolTotalLiquidityInUsdRequest, opts ...grpc.CallOption) (*PoolTotalLiquidityInUsdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PoolTotalLiquidityInUsdResponse)
	err := c.cc.Invoke(ctx, TickerQuery_PoolTotalLiquidityInUsd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TickerQueryServer is the server API for TickerQuery service.
// All implementations must embed UnimplementedTickerQueryServer
// for forward compatibility
type TickerQueryServer interface {
	// Tickers provides 24-hour pricing and volume information.
	Tickers(context.Context, *TickersRequest) (*TickersResponse, error)
	// Liquidity
	PoolTotalLiquidityInUsd(context.Context, *PoolTotalLiquidityInUsdRequest) (*PoolTotalLiquidityInUsdResponse, error)
	mustEmbedUnimplementedTickerQueryServer()
}

// UnimplementedTickerQueryServer must be embedded to have forward compatible implementations.
type UnimplementedTickerQueryServer struct {
}

func (UnimplementedTickerQueryServer) Tickers(context.Context, *TickersRequest) (*TickersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Tickers not implemented")
}
func (UnimplementedTickerQueryServer) PoolTotalLiquidityInUsd(context.Context, *PoolTotalLiquidityInUsdRequest) (*PoolTotalLiquidityInUsdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolTotalLiquidityInUsd not implemented")
}
func (UnimplementedTickerQueryServer) mustEmbedUnimplementedTickerQueryServer() {}

// UnsafeTickerQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TickerQueryServer will
// result in compilation errors.
type UnsafeTickerQueryServer interface {
	mustEmbedUnimplementedTickerQueryServer()
}

func RegisterTickerQueryServer(s grpc.ServiceRegistrar, srv TickerQueryServer) {
	s.RegisterService(&TickerQuery_ServiceDesc, srv)
}

func _TickerQuery_Tickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TickersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TickerQueryServer).Tickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TickerQuery_Tickers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TickerQueryServer).Tickers(ctx, req.(*TickersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TickerQuery_PoolTotalLiquidityInUsd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PoolTotalLiquidityInUsdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TickerQueryServer).PoolTotalLiquidityInUsd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TickerQuery_PoolTotalLiquidityInUsd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TickerQueryServer).PoolTotalLiquidityInUsd(ctx, req.(*PoolTotalLiquidityInUsdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TickerQuery_ServiceDesc is the grpc.ServiceDesc for TickerQuery service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TickerQuery_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ticker.TickerQuery",
	HandlerType: (*TickerQueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Tickers",
			Handler:    _TickerQuery_Tickers_Handler,
		},
		{
			MethodName: "PoolTotalLiquidityInUsd",
			Handler:    _TickerQuery_PoolTotalLiquidityInUsd_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ticker/query.proto",
}
